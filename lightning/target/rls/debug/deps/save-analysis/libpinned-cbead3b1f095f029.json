{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0","program":"/home/nick12345/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","pinned","--edition=2021","/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=cbead3b1f095f029","-C","extra-filename=-cbead3b1f095f029","--out-dir","/home/nick12345/Desktop/dir_git/dealtech_front/lightning/target/rls/debug/deps","-L","dependency=/home/nick12345/Desktop/dir_git/dealtech_front/lightning/target/rls/debug/deps","--extern","futures=/home/nick12345/Desktop/dir_git/dealtech_front/lightning/target/rls/debug/deps/libfutures-e296b22c3093ee82.rmeta","--extern","rustversion=/home/nick12345/Desktop/dir_git/dealtech_front/lightning/target/rls/debug/deps/librustversion-1bf04f8b0de96743.so","--extern","thiserror=/home/nick12345/Desktop/dir_git/dealtech_front/lightning/target/rls/debug/deps/libthiserror-7ef0c1668ec5d2a2.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/nick12345/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/nick12345/Desktop/dir_git/dealtech_front/lightning/target/rls/debug/deps/libpinned-cbead3b1f095f029.rmeta"},"prelude":{"crate_id":{"name":"pinned","disambiguator":[12859236153654273495,0]},"crate_root":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src","external_crates":[{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9914303954752503396,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[15846600599516386926,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3248197779922953368,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16106073209810206859,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[705058097557950442,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4226859831290989395,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8113236783331938933,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17166186933304791475,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[9102879459332679527,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17334790913793278849,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[15832914008974928315,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[4406420180649270496,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[1969707906566880681,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[13786306822812891743,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[3136484058452542816,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[4549596711944770628,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[11754765901466761141,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[12231018808310572442,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12139228928510032792,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","num":20,"id":{"name":"futures","disambiguator":[697333781638133849,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","num":21,"id":{"name":"futures_core","disambiguator":[2889476389752248248,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","num":22,"id":{"name":"futures_util","disambiguator":[17921343569299182158,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","num":23,"id":{"name":"pin_utils","disambiguator":[14779779622709215863,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","num":24,"id":{"name":"futures_macro","disambiguator":[6906675616549803926,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","num":25,"id":{"name":"futures_task","disambiguator":[14504772446370623985,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","num":26,"id":{"name":"futures_sink","disambiguator":[17069752836241684674,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","num":27,"id":{"name":"pin_project_lite","disambiguator":[13349260882500549000,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","num":28,"id":{"name":"futures_channel","disambiguator":[12723433582893712259,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","num":29,"id":{"name":"slab","disambiguator":[8845407529126862251,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","num":30,"id":{"name":"futures_io","disambiguator":[13768654741826238221,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","num":31,"id":{"name":"memchr","disambiguator":[6978731604939472485,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","num":32,"id":{"name":"thiserror","disambiguator":[17515745215597548161,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","num":33,"id":{"name":"thiserror_impl","disambiguator":[15445344435957954279,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","num":34,"id":{"name":"rustversion","disambiguator":[16762399091921583065,0]}}],"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":0,"byte_end":916,"line_start":1,"line_end":29,"column_start":1,"column_end":19}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27061,"byte_end":27062,"line_start":12,"line_end":12,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"TryLockResult, TryLockError","parent":{"krate":0,"index":175}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27084,"byte_end":27085,"line_start":13,"line_end":13,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"RwLockReadGuard","parent":{"krate":0,"index":175}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27128,"byte_end":27129,"line_start":15,"line_end":15,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"RwLockWriteGuard","parent":{"krate":0,"index":175}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":895,"byte_end":896,"line_start":28,"line_end":28,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":914,"byte_end":915,"line_start":29,"line_end":29,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":0,"byte_end":916,"line_start":1,"line_end":29,"column_start":1,"column_end":19},"name":"","qualname":"::","value":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":23},{"krate":0,"index":36},{"krate":0,"index":128},{"krate":0,"index":175},{"krate":0,"index":296},{"krate":0,"index":310},{"krate":0,"index":311}],"decl_id":null,"docs":" Task synchronisation primitives for pinned tasks.","sig":null,"attributes":[{"value":"/ Task synchronisation primitives for pinned tasks.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":0,"byte_end":53,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":54,"byte_end":57,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides the following task synchronisation mechanisms for `!Send` futures:","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":58,"byte_end":148,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":149,"byte_end":152,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ - [`Barrier`]: Ensures multiple tasks to wait until all tasks have reached a point in the","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":153,"byte_end":246,"line_start":5,"line_end":5,"column_start":1,"column_end":94}},{"value":"/ program before continuing execution of all together.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":247,"byte_end":303,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/ - [`RwLock`]: Provides a mutual exclusion mechanism which allows multiple readers at the same","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":304,"byte_end":401,"line_start":7,"line_end":7,"column_start":1,"column_end":98}},{"value":"/ time, while allowing only one writer at a time.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":402,"byte_end":453,"line_start":8,"line_end":8,"column_start":1,"column_end":52}},{"value":"/ - [`mpsc`]: A channel that supports sending multiple values from multiple producers to a single","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":454,"byte_end":553,"line_start":9,"line_end":9,"column_start":1,"column_end":100}},{"value":"/ receiver.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":554,"byte_end":567,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/ - [`oneshot`]: A channel to send one single value from a producer to a receiver.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":568,"byte_end":652,"line_start":11,"line_end":11,"column_start":1,"column_end":85}},{"value":"deny(missing_docs, missing_debug_implementations, bare_trait_objects,\nanonymous_parameters, elided_lifetimes_in_paths)","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":654,"byte_end":798,"line_start":13,"line_end":19,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":312},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":1156,"byte_end":1173,"line_start":9,"line_end":9,"column_start":12,"column_end":29},"name":"BarrierWaitResult","qualname":"::barrier::BarrierWaitResult","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `BarrierWaitResult` is returned by [`wait`](Barrier::wait) when all tasks in the [`Barrier`]\n have rendezvoused.\n","sig":null,"attributes":[{"value":"/ A `BarrierWaitResult` is returned by [`wait`](Barrier::wait) when all tasks in the [`Barrier`]","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":999,"byte_end":1097,"line_start":6,"line_end":6,"column_start":1,"column_end":99}},{"value":"/ have rendezvoused.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":1098,"byte_end":1120,"line_start":7,"line_end":7,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":1413,"byte_end":1422,"line_start":16,"line_end":16,"column_start":12,"column_end":21},"name":"is_leader","qualname":"<BarrierWaitResult>::is_leader","value":"fn is_leader(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if this task from wait is the \"leader task\".","sig":null,"attributes":[{"value":"/ Returns `true` if this task from wait is the \"leader task\".","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":1211,"byte_end":1274,"line_start":12,"line_end":12,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":1279,"byte_end":1282,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ Only one task will have `true` returned from their result, all other tasks will have","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":1287,"byte_end":1375,"line_start":14,"line_end":14,"column_start":5,"column_end":93}},{"value":"/ `false` returned.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":1380,"byte_end":1401,"line_start":15,"line_end":15,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":325},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3223,"byte_end":3230,"line_start":89,"line_end":89,"column_start":12,"column_end":19},"name":"Barrier","qualname":"::barrier::Barrier","value":"Barrier {  }","parent":null,"children":[{"krate":0,"index":326}],"decl_id":null,"docs":" A barrier enables multiple tasks to synchronise the beginning of some computation.","sig":null,"attributes":[{"value":"/ A barrier enables multiple tasks to synchronise the beginning of some computation.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2051,"byte_end":2137,"line_start":50,"line_end":50,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2138,"byte_end":2141,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2142,"byte_end":2149,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ # #[tokio::main]","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2150,"byte_end":2170,"line_start":53,"line_end":53,"column_start":1,"column_end":21}},{"value":"/ # async fn main() {","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2171,"byte_end":2194,"line_start":54,"line_end":54,"column_start":1,"column_end":24}},{"value":"/ # let local_set = tokio::task::LocalSet::new();","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2195,"byte_end":2246,"line_start":55,"line_end":55,"column_start":1,"column_end":52}},{"value":"/ # local_set.run_until(async {","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2247,"byte_end":2280,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/ # use std::rc::Rc;","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2281,"byte_end":2303,"line_start":57,"line_end":57,"column_start":1,"column_end":23}},{"value":"/ # use pinned::Barrier;","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2304,"byte_end":2330,"line_start":58,"line_end":58,"column_start":1,"column_end":27}},{"value":"/ #","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2331,"byte_end":2336,"line_start":59,"line_end":59,"column_start":1,"column_end":6}},{"value":"/ let mut handles = Vec::with_capacity(10);","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2337,"byte_end":2382,"line_start":60,"line_end":60,"column_start":1,"column_end":46}},{"value":"/ let barrier = Rc::new(Barrier::new(10));","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2383,"byte_end":2427,"line_start":61,"line_end":61,"column_start":1,"column_end":45}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2428,"byte_end":2448,"line_start":62,"line_end":62,"column_start":1,"column_end":21}},{"value":"/     let c = barrier.clone();","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2449,"byte_end":2481,"line_start":63,"line_end":63,"column_start":1,"column_end":33}},{"value":"/     // The same messages will be printed together.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2482,"byte_end":2536,"line_start":64,"line_end":64,"column_start":1,"column_end":55}},{"value":"/     // You will NOT see any interleaving.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2537,"byte_end":2582,"line_start":65,"line_end":65,"column_start":1,"column_end":46}},{"value":"/     handles.push(tokio::task::spawn_local(async move {","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2583,"byte_end":2641,"line_start":66,"line_end":66,"column_start":1,"column_end":59}},{"value":"/         println!(\"before wait\");","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2642,"byte_end":2678,"line_start":67,"line_end":67,"column_start":1,"column_end":37}},{"value":"/         let wait_result = c.wait().await;","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2679,"byte_end":2724,"line_start":68,"line_end":68,"column_start":1,"column_end":46}},{"value":"/         println!(\"after wait\");","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2725,"byte_end":2760,"line_start":69,"line_end":69,"column_start":1,"column_end":36}},{"value":"/         wait_result","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2761,"byte_end":2784,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/     }));","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2785,"byte_end":2797,"line_start":71,"line_end":71,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2798,"byte_end":2803,"line_start":72,"line_end":72,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2804,"byte_end":2807,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ // Will not resolve until all \"after wait\" messages have been printed","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2808,"byte_end":2881,"line_start":74,"line_end":74,"column_start":1,"column_end":74}},{"value":"/ let mut num_leaders = 0;","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2882,"byte_end":2910,"line_start":75,"line_end":75,"column_start":1,"column_end":29}},{"value":"/ for handle in handles {","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2911,"byte_end":2938,"line_start":76,"line_end":76,"column_start":1,"column_end":28}},{"value":"/     let wait_result = handle.await.unwrap();","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2939,"byte_end":2987,"line_start":77,"line_end":77,"column_start":1,"column_end":49}},{"value":"/     if wait_result.is_leader() {","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":2988,"byte_end":3024,"line_start":78,"line_end":78,"column_start":1,"column_end":37}},{"value":"/         num_leaders += 1;","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3025,"byte_end":3054,"line_start":79,"line_end":79,"column_start":1,"column_end":30}},{"value":"/     }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3055,"byte_end":3064,"line_start":80,"line_end":80,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3065,"byte_end":3070,"line_start":81,"line_end":81,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3071,"byte_end":3074,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ // Exactly one barrier will resolve as the \"leader\"","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3075,"byte_end":3130,"line_start":83,"line_end":83,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(num_leaders, 1);","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3131,"byte_end":3162,"line_start":84,"line_end":84,"column_start":1,"column_end":32}},{"value":"/ # }).await;","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3163,"byte_end":3178,"line_start":85,"line_end":85,"column_start":1,"column_end":16}},{"value":"/ # }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3179,"byte_end":3186,"line_start":86,"line_end":86,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3187,"byte_end":3194,"line_start":87,"line_end":87,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3517,"byte_end":3520,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<Barrier>::new","value":"fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new barrier that can block a given number of tasks.","sig":null,"attributes":[{"value":"/ Creates a new barrier that can block a given number of tasks.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3285,"byte_end":3350,"line_start":94,"line_end":94,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3355,"byte_end":3358,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ A barrier will block `n`-1 tasks which call [`Barrier::wait`] and then wake up all tasks at","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3363,"byte_end":3458,"line_start":96,"line_end":96,"column_start":5,"column_end":100}},{"value":"/ once when the `n`th task calls `wait`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3463,"byte_end":3505,"line_start":97,"line_end":97,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":4207,"byte_end":4211,"line_start":116,"line_end":116,"column_start":18,"column_end":22},"name":"wait","qualname":"<Barrier>::wait","value":"async fn wait<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Does not resolve until all tasks have rendezvoused here.","sig":null,"attributes":[{"value":"/ Does not resolve until all tasks have rendezvoused here.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3745,"byte_end":3805,"line_start":109,"line_end":109,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3810,"byte_end":3813,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Barriers are re-usable after all tasks have rendezvoused once, and can be used continuously.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3818,"byte_end":3914,"line_start":111,"line_end":111,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3919,"byte_end":3922,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ A single (arbitrary) future will receive a [`BarrierWaitResult`] that returns `true` from","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3927,"byte_end":4020,"line_start":113,"line_end":113,"column_start":5,"column_end":98}},{"value":"/ [`BarrierWaitResult::is_leader`] when returning from this function, and all other tasks will","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":4025,"byte_end":4121,"line_start":114,"line_end":114,"column_start":5,"column_end":101}},{"value":"/ receive a result that will return `false` from `is_leader`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":4126,"byte_end":4189,"line_start":115,"line_end":115,"column_start":5,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":36},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mpsc","qualname":"::mpsc","value":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","parent":null,"children":[{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":341},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":339},{"krate":0,"index":351},{"krate":0,"index":343},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":359},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":357},{"krate":0,"index":361},{"krate":0,"index":368},{"krate":0,"index":75},{"krate":0,"index":371},{"krate":0,"index":374},{"krate":0,"index":84},{"krate":0,"index":90},{"krate":0,"index":95},{"krate":0,"index":99},{"krate":0,"index":377},{"krate":0,"index":380},{"krate":0,"index":103},{"krate":0,"index":109},{"krate":0,"index":113},{"krate":0,"index":117},{"krate":0,"index":126}],"decl_id":null,"docs":" A multi-producer, single-receiver channel.","sig":null,"attributes":[{"value":"/ A multi-producer, single-receiver channel.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":7399,"byte_end":7445,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":7446,"byte_end":7449,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This is an asynchronous, `!Send` version of `std::sync::mpsc`. Currently only the unbounded","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":7450,"byte_end":7545,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ variant is implemented.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":7546,"byte_end":7573,"line_start":4,"line_end":4,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":7574,"byte_end":7577,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [`UnboundedReceiver`] implements [`Stream`] and allows asynchronous tasks to read values out of","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":7578,"byte_end":7677,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ the channel. The `UnboundedReceiver` Stream will suspend and wait for available values if the","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":7678,"byte_end":7775,"line_start":7,"line_end":7,"column_start":1,"column_end":98}},{"value":"/ current queue is empty. [`UnboundedSender`] implements [`Sink`] and allows messages to be sent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":7776,"byte_end":7874,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"/ to the corresponding `UnboundedReceiver`. The `UnboundedReceiver` also implements a","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":7875,"byte_end":7962,"line_start":9,"line_end":9,"column_start":1,"column_end":88}},{"value":"/ [`send_now`](UnboundedSender::send_now) method to send a value synchronously.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":7963,"byte_end":8044,"line_start":10,"line_end":10,"column_start":1,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":341},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":8433,"byte_end":8445,"line_start":27,"line_end":27,"column_start":12,"column_end":24},"name":"TryRecvError","qualname":"::mpsc::TryRecvError","value":"TryRecvError {  }","parent":null,"children":[{"krate":0,"index":342}],"decl_id":null,"docs":" Error returned by [`try_next`](UnboundedReceiver::try_next).\n","sig":null,"attributes":[{"value":"/ Error returned by [`try_next`](UnboundedReceiver::try_next).","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":8306,"byte_end":8370,"line_start":24,"line_end":24,"column_start":1,"column_end":65}},{"value":"error(\"queue is empty\")","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":8395,"byte_end":8421,"line_start":26,"line_end":26,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":351},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":8606,"byte_end":8615,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"SendError","qualname":"::mpsc::SendError","value":"SendError { inner }","parent":null,"children":[{"krate":0,"index":353}],"decl_id":null,"docs":" Error returned by [`send_now`](UnboundedSender::send_now).\n","sig":null,"attributes":[{"value":"/ Error returned by [`send_now`](UnboundedSender::send_now).","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":8481,"byte_end":8543,"line_start":31,"line_end":31,"column_start":1,"column_end":63}},{"value":"error(\"failed to send\")","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":8568,"byte_end":8594,"line_start":33,"line_end":33,"column_start":1,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":353},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":8653,"byte_end":8658,"line_start":36,"line_end":36,"column_start":9,"column_end":14},"name":"inner","qualname":"::mpsc::SendError::inner","value":"T","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" The send value.\n","sig":null,"attributes":[{"value":"/ The send value.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":8625,"byte_end":8644,"line_start":35,"line_end":35,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":359},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":8816,"byte_end":8828,"line_start":42,"line_end":42,"column_start":12,"column_end":24},"name":"TrySendError","qualname":"::mpsc::TrySendError","value":"TrySendError {  }","parent":null,"children":[{"krate":0,"index":360}],"decl_id":null,"docs":" Error returned by [`UnboundedSender`] when used as a [`Sink`](futures::sink::Sink).\n","sig":null,"attributes":[{"value":"/ Error returned by [`UnboundedSender`] when used as a [`Sink`](futures::sink::Sink).","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":8666,"byte_end":8753,"line_start":39,"line_end":39,"column_start":1,"column_end":88}},{"value":"error(\"failed to send\")","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":8778,"byte_end":8804,"line_start":41,"line_end":41,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":371},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":10840,"byte_end":10857,"line_start":131,"line_end":131,"column_start":12,"column_end":29},"name":"UnboundedReceiver","qualname":"::mpsc::UnboundedReceiver","value":"UnboundedReceiver {  }","parent":null,"children":[{"krate":0,"index":373}],"decl_id":null,"docs":" The receiver of an unbounded mpsc channel.","sig":null,"attributes":[{"value":"/ The receiver of an unbounded mpsc channel.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":10710,"byte_end":10756,"line_start":127,"line_end":127,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":10757,"byte_end":10760,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ This is created by the [`unbounded`] function.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":10761,"byte_end":10811,"line_start":129,"line_end":129,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":11226,"byte_end":11234,"line_start":142,"line_end":142,"column_start":12,"column_end":20},"name":"try_next","qualname":"<UnboundedReceiver<T>>::try_next","value":"fn try_next(&Self) -> Result<Option<T>, TryRecvError>","parent":null,"children":[],"decl_id":null,"docs":" Try to read the next value from the channel.","sig":null,"attributes":[{"value":"/ Try to read the next value from the channel.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":10938,"byte_end":10986,"line_start":136,"line_end":136,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":10991,"byte_end":10994,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ This function will return:","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":10999,"byte_end":11029,"line_start":138,"line_end":138,"column_start":5,"column_end":35}},{"value":"/ - `Ok(Some(T))` if a value is ready.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":11034,"byte_end":11074,"line_start":139,"line_end":139,"column_start":5,"column_end":45}},{"value":"/ - `Ok(None)` if the channel has become closed.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":11079,"byte_end":11129,"line_start":140,"line_end":140,"column_start":5,"column_end":55}},{"value":"/ - `Err(TryRecvError)` if the channel is not closed and the channel is empty.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":11134,"byte_end":11214,"line_start":141,"line_end":141,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":11934,"byte_end":11939,"line_start":158,"line_end":158,"column_start":12,"column_end":17},"name":"close","qualname":"<UnboundedReceiver<T>>::close","value":"fn close(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Closes the receiver of the channel without dropping it.","sig":null,"attributes":[{"value":"/ Closes the receiver of the channel without dropping it.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":11706,"byte_end":11765,"line_start":154,"line_end":154,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":11770,"byte_end":11773,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ This prevents any further messages from being sent on the channel while still enabling the","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":11778,"byte_end":11872,"line_start":156,"line_end":156,"column_start":5,"column_end":99}},{"value":"/ receiver to drain messages in the buffer.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":11877,"byte_end":11922,"line_start":157,"line_end":157,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":12441,"byte_end":12450,"line_start":175,"line_end":175,"column_start":8,"column_end":17},"name":"poll_next","qualname":"<UnboundedReceiver<T> as futures::Stream>::poll_next","value":"fn poll_next(Pin<&mut Self>, &mut Context) -> Poll<Option<Self::Item>>","parent":{"krate":21,"index":96},"children":[],"decl_id":{"krate":21,"index":98},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":13007,"byte_end":13020,"line_start":189,"line_end":189,"column_start":8,"column_end":21},"name":"is_terminated","qualname":"<UnboundedReceiver<T> as futures::stream::FusedStream>::is_terminated","value":"fn is_terminated(&Self) -> bool","parent":{"krate":21,"index":110},"children":[],"decl_id":{"krate":21,"index":111},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":13511,"byte_end":13515,"line_start":203,"line_end":203,"column_start":8,"column_end":12},"name":"drop","qualname":"<UnboundedReceiver<T> as std::ops::Drop>::drop","value":"fn drop(&mut Self)","parent":{"krate":2,"index":3393},"children":[],"decl_id":{"krate":2,"index":3394},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":377},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":14085,"byte_end":14100,"line_start":220,"line_end":220,"column_start":12,"column_end":27},"name":"UnboundedSender","qualname":"::mpsc::UnboundedSender","value":"UnboundedSender {  }","parent":null,"children":[{"krate":0,"index":379}],"decl_id":null,"docs":" The sender of an unbounded mpsc channel.","sig":null,"attributes":[{"value":"/ The sender of an unbounded mpsc channel.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":13951,"byte_end":13995,"line_start":216,"line_end":216,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":13996,"byte_end":13999,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ This value is created by the [`unbounded`] function.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":14000,"byte_end":14056,"line_start":218,"line_end":218,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":14465,"byte_end":14473,"line_start":230,"line_end":230,"column_start":12,"column_end":20},"name":"send_now","qualname":"<UnboundedSender<T>>::send_now","value":"fn send_now(&Self, T) -> Result<(), SendError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Sends a value to the unbounded receiver.","sig":null,"attributes":[{"value":"/ Sends a value to the unbounded receiver.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":14179,"byte_end":14223,"line_start":225,"line_end":225,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":14228,"byte_end":14231,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ This is an unbounded sender, so this function differs from","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":14236,"byte_end":14298,"line_start":227,"line_end":227,"column_start":5,"column_end":67}},{"value":"/ [`SinkExt::send`](futures::sink::SinkExt::send) by ensuring the return type reflects","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":14303,"byte_end":14391,"line_start":228,"line_end":228,"column_start":5,"column_end":93}},{"value":"/ that the channel is always ready to receive messages.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":14396,"byte_end":14453,"line_start":229,"line_end":229,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":15077,"byte_end":15086,"line_start":246,"line_end":246,"column_start":12,"column_end":21},"name":"close_now","qualname":"<UnboundedSender<T>>::close_now","value":"fn close_now(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Closes the channel.","sig":null,"attributes":[{"value":"/ Closes the channel.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":14947,"byte_end":14970,"line_start":243,"line_end":243,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":14975,"byte_end":14978,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Every sender (dropped or not) is considered closed when this method is called.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":14983,"byte_end":15065,"line_start":245,"line_end":245,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":15558,"byte_end":15563,"line_start":260,"line_end":260,"column_start":8,"column_end":13},"name":"clone","qualname":"<UnboundedSender<T> as std::clone::Clone>::clone","value":"fn clone(&Self) -> Self","parent":{"krate":2,"index":2772},"children":[],"decl_id":{"krate":2,"index":2773},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":16124,"byte_end":16128,"line_start":278,"line_end":278,"column_start":8,"column_end":12},"name":"drop","qualname":"<UnboundedSender<T> as std::ops::Drop>::drop","value":"fn drop(&mut Self)","parent":{"krate":2,"index":3393},"children":[],"decl_id":{"krate":2,"index":3394},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":16654,"byte_end":16664,"line_start":294,"line_end":294,"column_start":8,"column_end":18},"name":"start_send","qualname":"<&'_ UnboundedSender<T> as futures::Sink>::start_send","value":"fn start_send(std::pin::Pin<&mut Self>, T) -> Result<(), Self::Error>","parent":{"krate":26,"index":17},"children":[],"decl_id":{"krate":26,"index":21},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":16849,"byte_end":16859,"line_start":300,"line_end":300,"column_start":8,"column_end":18},"name":"poll_ready","qualname":"<&'_ UnboundedSender<T> as futures::Sink>::poll_ready","value":"fn poll_ready(std::pin::Pin<&mut Self>, &mut std::task::Context)\n-> Poll<Result<(), Self::Error>>","parent":{"krate":26,"index":17},"children":[],"decl_id":{"krate":26,"index":20},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":17251,"byte_end":17261,"line_start":314,"line_end":314,"column_start":8,"column_end":18},"name":"poll_flush","qualname":"<&'_ UnboundedSender<T> as futures::Sink>::poll_flush","value":"fn poll_flush(std::pin::Pin<&mut Self>, &mut std::task::Context)\n-> Poll<Result<(), Self::Error>>","parent":{"krate":26,"index":17},"children":[],"decl_id":{"krate":26,"index":22},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":17428,"byte_end":17438,"line_start":321,"line_end":321,"column_start":8,"column_end":18},"name":"poll_close","qualname":"<&'_ UnboundedSender<T> as futures::Sink>::poll_close","value":"fn poll_close(std::pin::Pin<&mut Self>, &mut std::task::Context)\n-> Poll<Result<(), Self::Error>>","parent":{"krate":26,"index":17},"children":[],"decl_id":{"krate":26,"index":23},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":126},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":17938,"byte_end":17947,"line_start":340,"line_end":340,"column_start":8,"column_end":17},"name":"unbounded","qualname":"::mpsc::unbounded","value":"fn unbounded<T>() -> (UnboundedSender<T>, UnboundedReceiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates an unbounded channel.","sig":null,"attributes":[{"value":"/ Creates an unbounded channel.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":17627,"byte_end":17660,"line_start":331,"line_end":331,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":17661,"byte_end":17664,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ The `send` method on Senders created by this function will always succeed and return immediately","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":17665,"byte_end":17765,"line_start":333,"line_end":333,"column_start":1,"column_end":101}},{"value":"/ as long as the channel is open.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":17766,"byte_end":17801,"line_start":334,"line_end":334,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":17802,"byte_end":17805,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"/ # Note","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":17806,"byte_end":17816,"line_start":336,"line_end":336,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":17817,"byte_end":17820,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"/ This channel has an infinite buffer and can run out of memory if the channel is not actively","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":17821,"byte_end":17917,"line_start":338,"line_end":338,"column_start":1,"column_end":97}},{"value":"/ drained.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":17918,"byte_end":17930,"line_start":339,"line_end":339,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":128},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"oneshot","qualname":"::oneshot","value":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":388},{"krate":0,"index":383},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":390},{"krate":0,"index":396},{"krate":0,"index":151},{"krate":0,"index":399},{"krate":0,"index":402},{"krate":0,"index":156},{"krate":0,"index":161},{"krate":0,"index":405},{"krate":0,"index":408},{"krate":0,"index":165},{"krate":0,"index":169},{"krate":0,"index":173}],"decl_id":null,"docs":" A channel that can pass one single value from a sender to a receiver.\n","sig":null,"attributes":[{"value":"/ A channel that can pass one single value from a sender to a receiver.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":20792,"byte_end":20865,"line_start":1,"line_end":1,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":388},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":21185,"byte_end":21194,"line_start":15,"line_end":15,"column_start":12,"column_end":21},"name":"RecvError","qualname":"::oneshot::RecvError","value":"RecvError {  }","parent":null,"children":[{"krate":0,"index":389}],"decl_id":null,"docs":" Error returned when the channel is closed before a value is sent to the [`Receiver`].\n","sig":null,"attributes":[{"value":"/ Error returned when the channel is closed before a value is sent to the [`Receiver`].","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":21023,"byte_end":21112,"line_start":12,"line_end":12,"column_start":1,"column_end":90}},{"value":"error(\"channel has been closed.\")","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":21137,"byte_end":21173,"line_start":14,"line_end":14,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":399},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":22678,"byte_end":22686,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::oneshot::Receiver","value":"Receiver {  }","parent":null,"children":[{"krate":0,"index":401}],"decl_id":null,"docs":" The receiver of a oneshot channel.","sig":null,"attributes":[{"value":"/ The receiver of a oneshot channel.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":22529,"byte_end":22567,"line_start":76,"line_end":76,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":22568,"byte_end":22571,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ This type has no recv method. To receive the value, `await` the receiver.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":22572,"byte_end":22649,"line_start":78,"line_end":78,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":22813,"byte_end":22817,"line_start":87,"line_end":87,"column_start":8,"column_end":12},"name":"poll","qualname":"<Receiver<T> as futures::Future>::poll","value":"fn poll(std::pin::Pin<&mut Self>, &mut std::task::Context)\n-> Poll<Self::Output>","parent":{"krate":2,"index":13328},"children":[],"decl_id":{"krate":2,"index":13330},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":23368,"byte_end":23372,"line_start":101,"line_end":101,"column_start":8,"column_end":12},"name":"drop","qualname":"<Receiver<T> as std::ops::Drop>::drop","value":"fn drop(&mut Self)","parent":{"krate":2,"index":3393},"children":[],"decl_id":{"krate":2,"index":3394},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":405},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":23878,"byte_end":23884,"line_start":116,"line_end":116,"column_start":12,"column_end":18},"name":"Sender","qualname":"::oneshot::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":407}],"decl_id":null,"docs":" The sender of a oneshot channel.\n","sig":null,"attributes":[{"value":"/ The sender of a oneshot channel.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":23813,"byte_end":23849,"line_start":114,"line_end":114,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":24037,"byte_end":24041,"line_start":122,"line_end":122,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender<T>>::send","value":"fn send(Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Send an item to the other side of the channel, consumes the sender.\n","sig":null,"attributes":[{"value":"/ Send an item to the other side of the channel, consumes the sender.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":23954,"byte_end":24025,"line_start":121,"line_end":121,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":24542,"byte_end":24546,"line_start":136,"line_end":136,"column_start":8,"column_end":12},"name":"drop","qualname":"<Sender<T> as std::ops::Drop>::drop","value":"fn drop(&mut Self)","parent":{"krate":2,"index":3393},"children":[],"decl_id":{"krate":2,"index":3394},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":173},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":25024,"byte_end":25031,"line_start":150,"line_end":150,"column_start":8,"column_end":15},"name":"channel","qualname":"::oneshot::channel","value":"fn channel<T>() -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Creates a oneshot channel.\n","sig":null,"attributes":[{"value":"/ Creates a oneshot channel.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":24986,"byte_end":25016,"line_start":149,"line_end":149,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":416},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37560,"byte_end":37572,"line_start":17,"line_end":17,"column_start":12,"column_end":24},"name":"TryLockError","qualname":"::rwlock::error::TryLockError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned from the [`RwLock::try_read`](super::RwLock::try_read) and\n [`RwLock::try_write`](super::RwLock::try_write)\n functions.","sig":null,"attributes":[{"value":"/ Error returned from the [`RwLock::try_read`](super::RwLock::try_read) and","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37117,"byte_end":37194,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/ [`RwLock::try_write`](super::RwLock::try_write)","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37195,"byte_end":37246,"line_start":7,"line_end":7,"column_start":1,"column_end":52}},{"value":"/ functions.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37247,"byte_end":37261,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37262,"byte_end":37265,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ `RwLock::try_read` operation will only fail if the lock is currently held by an exclusive","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37266,"byte_end":37359,"line_start":10,"line_end":10,"column_start":1,"column_end":94}},{"value":"/ writer.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37360,"byte_end":37371,"line_start":11,"line_end":11,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37372,"byte_end":37375,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ `RwLock::try_write` operation will fail if the lock is held by any reader or by an exclusive","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37376,"byte_end":37472,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"/ writer.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37473,"byte_end":37484,"line_start":14,"line_end":14,"column_start":1,"column_end":12}},{"value":"error(\"this operation would block.\")","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37509,"byte_end":37548,"line_start":16,"line_end":16,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":204},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37755,"byte_end":37768,"line_start":26,"line_end":26,"column_start":10,"column_end":23},"name":"TryLockResult","qualname":"::rwlock::error::TryLockResult","value":"result::Result<T, TryLockError>","parent":null,"children":[],"decl_id":null,"docs":" A type alias for the result of a nonblocking locking method.\n","sig":null,"attributes":[{"value":"/ A type alias for the result of a nonblocking locking method.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37681,"byte_end":37745,"line_start":25,"line_end":25,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":419},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":38076,"byte_end":38091,"line_start":10,"line_end":10,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::read_guard::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":422},{"krate":0,"index":423}],"decl_id":null,"docs":" RAII structure used to release the shared read access of a lock when dropped.","sig":null,"attributes":[{"value":"/ RAII structure used to release the shared read access of a lock when dropped.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":37881,"byte_end":37962,"line_start":6,"line_end":6,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":37963,"byte_end":37966,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This structure is created by the `read` method on [`RwLock`](super::RwLock).","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":37967,"byte_end":38047,"line_start":8,"line_end":8,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":38840,"byte_end":38843,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockReadGuard>::map","value":"fn map<U, F>(Self, F) -> RwLockReadGuard where F: FnOnce(&T) -> &U, U: ?Sized","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `RwLockReadGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `RwLockReadGuard` for a component of the locked data.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":38456,"byte_end":38525,"line_start":22,"line_end":22,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":38530,"byte_end":38533,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as data is already locked.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":38538,"byte_end":38595,"line_start":24,"line_end":24,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":38600,"byte_end":38603,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be used as `RwLockReadGuard::map(...)`. A","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":38608,"byte_end":38698,"line_start":26,"line_end":26,"column_start":5,"column_end":95}},{"value":"/ method would interfere with methods of the same name on the contents of the underlying data","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":38703,"byte_end":38798,"line_start":27,"line_end":27,"column_start":5,"column_end":100}},{"value":"/ used through `Deref`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":38803,"byte_end":38828,"line_start":28,"line_end":28,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":40137,"byte_end":40142,"line_start":71,"line_end":71,"column_start":8,"column_end":13},"name":"deref","qualname":"<RwLockReadGuard as std::ops::Deref>::deref","value":"fn deref(&Self) -> &Self::Target","parent":{"krate":2,"index":3369},"children":[],"decl_id":{"krate":2,"index":3371},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":441},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":42219,"byte_end":42235,"line_start":10,"line_end":10,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::write_guard::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":445}],"decl_id":null,"docs":" RAII structure used to release the exclusive write access of a lock when dropped.","sig":null,"attributes":[{"value":"/ RAII structure used to release the exclusive write access of a lock when dropped.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":42019,"byte_end":42104,"line_start":6,"line_end":6,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":42105,"byte_end":42108,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This structure is created by the `write` method on [`RwLock`](super::RwLock).","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":42109,"byte_end":42190,"line_start":8,"line_end":8,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":42993,"byte_end":42996,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"map","qualname":"<RwLockWriteGuard>::map","value":"fn map<U, F>(Self, F) -> RwLockWriteGuard where F: FnOnce(&mut T) -> &mut U,\nU: ?Sized","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `RwLockWriteGuard` for a component of the locked data.","sig":null,"attributes":[{"value":"/ Makes a new `RwLockWriteGuard` for a component of the locked data.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":42607,"byte_end":42677,"line_start":22,"line_end":22,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":42682,"byte_end":42685,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ This operation cannot fail as data is already locked.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":42690,"byte_end":42747,"line_start":24,"line_end":24,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":42752,"byte_end":42755,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ This is an associated function that needs to be used as `RwLockWriteGuard::map(...)`. A","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":42760,"byte_end":42851,"line_start":26,"line_end":26,"column_start":5,"column_end":96}},{"value":"/ method would interfere with methods of the same name on the contents of the underlying data","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":42856,"byte_end":42951,"line_start":27,"line_end":27,"column_start":5,"column_end":100}},{"value":"/ used through `Deref`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":42956,"byte_end":42981,"line_start":28,"line_end":28,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":44321,"byte_end":44326,"line_start":71,"line_end":71,"column_start":8,"column_end":13},"name":"deref","qualname":"<RwLockWriteGuard as std::ops::Deref>::deref","value":"fn deref(&Self) -> &Self::Target","parent":{"krate":2,"index":3369},"children":[],"decl_id":{"krate":2,"index":3371},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":44441,"byte_end":44450,"line_start":77,"line_end":77,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"<RwLockWriteGuard as std::ops::DerefMut>::deref_mut","value":"fn deref_mut(&mut Self) -> &mut <Self as Deref>::Target","parent":{"krate":2,"index":3382},"children":[],"decl_id":{"krate":2,"index":3383},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":450},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28212,"byte_end":28218,"line_start":51,"line_end":51,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":452},{"krate":0,"index":453}],"decl_id":null,"docs":" An asynchronous reader-writer lock.","sig":null,"attributes":[{"value":"/ An asynchronous reader-writer lock.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27132,"byte_end":27171,"line_start":17,"line_end":17,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27172,"byte_end":27175,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any point in time. The","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27176,"byte_end":27272,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ write portion of this lock typically allows modification of the underlying data (exclusive","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27273,"byte_end":27367,"line_start":20,"line_end":20,"column_start":1,"column_end":95}},{"value":"/ access) and the read portion of this lock typically allows for read-only access (shared access).","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27368,"byte_end":27468,"line_start":21,"line_end":21,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27469,"byte_end":27472,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The acquisition order of this lock is not guaranteed and depending on the runtime's","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27473,"byte_end":27560,"line_start":23,"line_end":23,"column_start":1,"column_end":88}},{"value":"/ implementation and preference of any used polling combinators.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27561,"byte_end":27627,"line_start":24,"line_end":24,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27628,"byte_end":27631,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27632,"byte_end":27646,"line_start":26,"line_end":26,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27647,"byte_end":27650,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27651,"byte_end":27658,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/ # #[tokio::main]","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27659,"byte_end":27679,"line_start":29,"line_end":29,"column_start":1,"column_end":21}},{"value":"/ # async fn main() {","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27680,"byte_end":27703,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"/ # use pinned::RwLock;","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27704,"byte_end":27729,"line_start":31,"line_end":31,"column_start":1,"column_end":26}},{"value":"/ let lock = RwLock::new(5);","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27730,"byte_end":27760,"line_start":32,"line_end":32,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27761,"byte_end":27764,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ // many reader locks can be held at once","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27765,"byte_end":27809,"line_start":34,"line_end":34,"column_start":1,"column_end":45}},{"value":"/ {","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27810,"byte_end":27815,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/     let r1 = lock.read().await;","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27816,"byte_end":27851,"line_start":36,"line_end":36,"column_start":1,"column_end":36}},{"value":"/     let r2 = lock.read().await;","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27852,"byte_end":27887,"line_start":37,"line_end":37,"column_start":1,"column_end":36}},{"value":"/     assert_eq!(*r1, 5);","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27888,"byte_end":27915,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/     assert_eq!(*r2, 5);","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27916,"byte_end":27943,"line_start":39,"line_end":39,"column_start":1,"column_end":28}},{"value":"/ } // read locks are dropped at this point","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27944,"byte_end":27989,"line_start":40,"line_end":40,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27990,"byte_end":27993,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ // only one write lock may be held, however","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":27994,"byte_end":28041,"line_start":42,"line_end":42,"column_start":1,"column_end":48}},{"value":"/ {","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28042,"byte_end":28047,"line_start":43,"line_end":43,"column_start":1,"column_end":6}},{"value":"/     let mut w = lock.write().await;","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28048,"byte_end":28087,"line_start":44,"line_end":44,"column_start":1,"column_end":40}},{"value":"/     *w += 1;","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28088,"byte_end":28104,"line_start":45,"line_end":45,"column_start":1,"column_end":17}},{"value":"/     assert_eq!(*w, 6);","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28105,"byte_end":28131,"line_start":46,"line_end":46,"column_start":1,"column_end":27}},{"value":"/ } // write lock is dropped here","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28132,"byte_end":28167,"line_start":47,"line_end":47,"column_start":1,"column_end":36}},{"value":"/ # }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28168,"byte_end":28175,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28176,"byte_end":28183,"line_start":49,"line_end":49,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28359,"byte_end":28362,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<RwLock<T>>::new","value":"fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `RwLock` containing value `T`\n","sig":null,"attributes":[{"value":"/ Creates a new `RwLock` containing value `T`","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28300,"byte_end":28347,"line_start":57,"line_end":57,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28553,"byte_end":28563,"line_start":66,"line_end":66,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<T>>::into_inner","value":"fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes the lock, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes the lock, returning the underlying data.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28488,"byte_end":28541,"line_start":65,"line_end":65,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":29133,"byte_end":29141,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<T>>::try_read","value":"fn try_read(&Self) -> TryLockResult<RwLockReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to acquire this `RwLock` with shared read access.","sig":null,"attributes":[{"value":"/ Attempts to acquire this `RwLock` with shared read access.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28661,"byte_end":28723,"line_start":75,"line_end":75,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28728,"byte_end":28731,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ If the access couldn’t be acquired immediately, returns [`TryLockError`]. Otherwise, an RAII","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28736,"byte_end":28834,"line_start":77,"line_end":77,"column_start":5,"column_end":101}},{"value":"/ guard is returned which will release read access when dropped.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28839,"byte_end":28905,"line_start":78,"line_end":78,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28910,"byte_end":28913,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28918,"byte_end":28951,"line_start":80,"line_end":80,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28956,"byte_end":28959,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ This function does not provide any guarantees with respect to the ordering of whether","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28964,"byte_end":29053,"line_start":82,"line_end":82,"column_start":5,"column_end":94}},{"value":"/ contentious readers or writers will acquire the lock first.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":29058,"byte_end":29121,"line_start":83,"line_end":83,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":29903,"byte_end":29912,"line_start":103,"line_end":103,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<T>>::try_write","value":"fn try_write(&Self) -> TryLockResult<RwLockWriteGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to lock this `RwLock` with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempts to lock this `RwLock` with exclusive write access.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":29430,"byte_end":29493,"line_start":94,"line_end":94,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":29498,"byte_end":29501,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ If the lock could not be acquired immediately, returns [`TryLockError`]. Otherwise, an RAII","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":29506,"byte_end":29601,"line_start":96,"line_end":96,"column_start":5,"column_end":100}},{"value":"/ guard is returned which will release the lock when it is dropped.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":29606,"byte_end":29675,"line_start":97,"line_end":97,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":29680,"byte_end":29683,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ This function does not block.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":29688,"byte_end":29721,"line_start":99,"line_end":99,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":29726,"byte_end":29729,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ This function does not provide any guarantees with respect to the ordering of whether","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":29734,"byte_end":29823,"line_start":101,"line_end":101,"column_start":5,"column_end":94}},{"value":"/ contentious readers or writers will acquire the lock first.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":29828,"byte_end":29891,"line_start":102,"line_end":102,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":30993,"byte_end":30997,"line_start":137,"line_end":137,"column_start":18,"column_end":22},"name":"read","qualname":"<RwLock<T>>::read","value":"async fn read<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Locks the current `RwLock` with shared read access, causing the current task to yield\n until the lock has been acquired.","sig":null,"attributes":[{"value":"/ Locks the current `RwLock` with shared read access, causing the current task to yield","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":30573,"byte_end":30662,"line_start":130,"line_end":130,"column_start":5,"column_end":94}},{"value":"/ until the lock has been acquired.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":30667,"byte_end":30704,"line_start":131,"line_end":131,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":30709,"byte_end":30712,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ This method does not provide any guarantees with respect to the ordering of whether","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":30717,"byte_end":30804,"line_start":133,"line_end":133,"column_start":5,"column_end":92}},{"value":"/ contentious readers or writers will acquire the lock first.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":30809,"byte_end":30872,"line_start":134,"line_end":134,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":30877,"byte_end":30880,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this task's shared access once it is dropped.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":30885,"byte_end":30975,"line_start":136,"line_end":136,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":31770,"byte_end":31775,"line_start":157,"line_end":157,"column_start":18,"column_end":23},"name":"write","qualname":"<RwLock<T>>::write","value":"async fn write<'_>(&'_ Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Locks the current `RwLock` with exclusive write access, causing the current task to yield\n until the lock has been acquired.","sig":null,"attributes":[{"value":"/ Locks the current `RwLock` with exclusive write access, causing the current task to yield","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":31358,"byte_end":31451,"line_start":150,"line_end":150,"column_start":5,"column_end":98}},{"value":"/ until the lock has been acquired.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":31456,"byte_end":31493,"line_start":151,"line_end":151,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":31498,"byte_end":31501,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ This method does not provide any guarantees with respect to the ordering of whether","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":31506,"byte_end":31593,"line_start":153,"line_end":153,"column_start":5,"column_end":92}},{"value":"/ contentious readers or writers will acquire the lock first.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":31598,"byte_end":31661,"line_start":154,"line_end":154,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":31666,"byte_end":31669,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access once it is dropped.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":31674,"byte_end":31752,"line_start":156,"line_end":156,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":32314,"byte_end":32321,"line_start":173,"line_end":173,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<T>>::get_mut","value":"fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":32138,"byte_end":32193,"line_start":170,"line_end":170,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":32198,"byte_end":32201,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ This call borrows `RwLock` mutably (at compile-time) so there is no need for dynamic checks.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":32206,"byte_end":32302,"line_start":172,"line_end":172,"column_start":5,"column_end":101}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":1187,"byte_end":1204,"line_start":11,"line_end":11,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":14}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":1632,"byte_end":1637,"line_start":30,"line_end":30,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3271,"byte_end":3278,"line_start":93,"line_end":93,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/cell.rs","byte_start":6782,"byte_end":6792,"line_start":19,"line_end":19,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":9077,"byte_end":9082,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":10911,"byte_end":10928,"line_start":135,"line_end":135,"column_start":9,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":12391,"byte_end":12408,"line_start":172,"line_end":172,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":12977,"byte_end":12994,"line_start":188,"line_end":188,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":13481,"byte_end":13498,"line_start":202,"line_end":202,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":14154,"byte_end":14169,"line_start":224,"line_end":224,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":105},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":15530,"byte_end":15545,"line_start":259,"line_end":259,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":16096,"byte_end":16111,"line_start":277,"line_end":277,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":115}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":21417,"byte_end":21422,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":22751,"byte_end":22759,"line_start":84,"line_end":84,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":23347,"byte_end":23355,"line_start":100,"line_end":100,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":23938,"byte_end":23944,"line_start":120,"line_end":120,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":24523,"byte_end":24529,"line_start":135,"line_end":135,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37597,"byte_end":37609,"line_start":19,"line_end":19,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":38406,"byte_end":38421,"line_start":18,"line_end":18,"column_start":13,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":40062,"byte_end":40077,"line_start":65,"line_end":65,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/wakers.rs","byte_start":40513,"byte_end":40522,"line_start":15,"line_end":15,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/wakers.rs","byte_start":40682,"byte_end":40688,"line_start":26,"line_end":26,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":42556,"byte_end":42572,"line_start":18,"line_end":18,"column_start":13,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":259}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":44245,"byte_end":44261,"line_start":65,"line_end":65,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":44408,"byte_end":44424,"line_start":76,"line_end":76,"column_start":22,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28284,"byte_end":28290,"line_start":56,"line_end":56,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28624,"byte_end":28630,"line_start":71,"line_end":71,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":283},{"krate":0,"index":285},{"krate":0,"index":289},{"krate":0,"index":292},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":831,"byte_end":835,"line_start":23,"line_end":23,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":36}},{"kind":"Mod","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/lib.rs","byte_start":845,"byte_end":852,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":128}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":1187,"byte_end":1204,"line_start":11,"line_end":11,"column_start":6,"column_end":23},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":312},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":1632,"byte_end":1637,"line_start":30,"line_end":30,"column_start":6,"column_end":11},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":319},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/barrier.rs","byte_start":3271,"byte_end":3278,"line_start":93,"line_end":93,"column_start":6,"column_end":13},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":325},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/cell.rs","byte_start":6782,"byte_end":6792,"line_start":19,"line_end":19,"column_start":9,"column_end":19},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":9077,"byte_end":9082,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":361},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":10911,"byte_end":10928,"line_start":135,"line_end":135,"column_start":9,"column_end":26},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":12391,"byte_end":12408,"line_start":172,"line_end":172,"column_start":20,"column_end":37},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":371},"to":{"krate":21,"index":96}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":12977,"byte_end":12994,"line_start":188,"line_end":188,"column_start":25,"column_end":42},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":371},"to":{"krate":21,"index":110}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":13481,"byte_end":13498,"line_start":202,"line_end":202,"column_start":18,"column_end":35},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":371},"to":{"krate":2,"index":3393}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":14154,"byte_end":14169,"line_start":224,"line_end":224,"column_start":9,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":15530,"byte_end":15545,"line_start":259,"line_end":259,"column_start":19,"column_end":34},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":377},"to":{"krate":2,"index":2772}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/mpsc.rs","byte_start":16096,"byte_end":16111,"line_start":277,"line_end":277,"column_start":18,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":377},"to":{"krate":2,"index":3393}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":21417,"byte_end":21422,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":390},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":22751,"byte_end":22759,"line_start":84,"line_end":84,"column_start":20,"column_end":28},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":399},"to":{"krate":2,"index":13328}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":23347,"byte_end":23355,"line_start":100,"line_end":100,"column_start":18,"column_end":26},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":399},"to":{"krate":2,"index":3393}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":23938,"byte_end":23944,"line_start":120,"line_end":120,"column_start":9,"column_end":15},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/oneshot.rs","byte_start":24523,"byte_end":24529,"line_start":135,"line_end":135,"column_start":18,"column_end":24},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":405},"to":{"krate":2,"index":3393}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/error.rs","byte_start":37597,"byte_end":37609,"line_start":19,"line_end":19,"column_start":6,"column_end":18},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":38406,"byte_end":38421,"line_start":18,"line_end":18,"column_start":13,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/read_guard.rs","byte_start":40062,"byte_end":40077,"line_start":65,"line_end":65,"column_start":19,"column_end":34},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":419},"to":{"krate":2,"index":3369}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/wakers.rs","byte_start":40513,"byte_end":40522,"line_start":15,"line_end":15,"column_start":15,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":428},"to":{"krate":2,"index":3393}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/wakers.rs","byte_start":40682,"byte_end":40688,"line_start":26,"line_end":26,"column_start":6,"column_end":12},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":437},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":42556,"byte_end":42572,"line_start":18,"line_end":18,"column_start":13,"column_end":29},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":441},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":44245,"byte_end":44261,"line_start":65,"line_end":65,"column_start":19,"column_end":35},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":441},"to":{"krate":2,"index":3369}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/write_guard.rs","byte_start":44408,"byte_end":44424,"line_start":76,"line_end":76,"column_start":22,"column_end":38},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":441},"to":{"krate":2,"index":3382}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28284,"byte_end":28290,"line_start":56,"line_end":56,"column_start":9,"column_end":15},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":450},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/pinned-0.1.0/src/rwlock/mod.rs","byte_start":28624,"byte_end":28630,"line_start":71,"line_end":71,"column_start":9,"column_end":15},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":450},"to":{"krate":4294967295,"index":4294967295}}]}