{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0","program":"/home/nick12345/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","litrs","--edition=2018","/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"proc-macro2\"","-C","metadata=5bb50a9914a9aed4","-C","extra-filename=-5bb50a9914a9aed4","--out-dir","/home/nick12345/Desktop/dir_git/dealtech_front/lightning/target/rls/debug/deps","-L","dependency=/home/nick12345/Desktop/dir_git/dealtech_front/lightning/target/rls/debug/deps","--extern","proc_macro2=/home/nick12345/Desktop/dir_git/dealtech_front/lightning/target/rls/debug/deps/libproc_macro2-2d66ea160fe60f1a.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/nick12345/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/nick12345/Desktop/dir_git/dealtech_front/lightning/target/rls/debug/deps/liblitrs-5bb50a9914a9aed4.rmeta"},"prelude":{"crate_id":{"name":"litrs","disambiguator":[8245076272238426071,0]},"crate_root":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src","external_crates":[{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[9914303954752503396,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","num":2,"id":{"name":"core","disambiguator":[15846600599516386926,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[3248197779922953368,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[16106073209810206859,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[705058097557950442,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[4226859831290989395,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[8113236783331938933,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17166186933304791475,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[9102879459332679527,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17334790913793278849,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[15832914008974928315,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[4406420180649270496,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[1969707906566880681,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[13786306822812891743,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[3136484058452542816,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[4549596711944770628,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[11754765901466761141,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[12231018808310572442,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12139228928510032792,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","num":20,"id":{"name":"proc_macro","disambiguator":[3179000477089499039,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","num":21,"id":{"name":"proc_macro2","disambiguator":[9966215763554821650,0]}},{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","num":22,"id":{"name":"unicode_ident","disambiguator":[13835074180872616336,0]}}],"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":0,"byte_end":9430,"line_start":1,"line_end":288,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":548},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4533,"byte_end":4540,"line_start":140,"line_end":140,"column_start":11,"column_end":18},"alias_span":null,"name":"BoolLit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":564},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4552,"byte_end":4559,"line_start":141,"line_end":141,"column_start":11,"column_end":18},"alias_span":null,"name":"ByteLit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":587},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4574,"byte_end":4587,"line_start":142,"line_end":142,"column_start":14,"column_end":27},"alias_span":null,"name":"ByteStringLit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":609},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4599,"byte_end":4606,"line_start":143,"line_end":143,"column_start":11,"column_end":18},"alias_span":null,"name":"CharLit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":632},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4618,"byte_end":4630,"line_start":144,"line_end":144,"column_start":11,"column_end":23},"alias_span":null,"name":"InvalidToken","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":687},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4632,"byte_end":4642,"line_start":144,"line_end":144,"column_start":25,"column_end":35},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":778},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4657,"byte_end":4665,"line_start":145,"line_end":145,"column_start":13,"column_end":21},"alias_span":null,"name":"FloatLit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":804},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4667,"byte_end":4676,"line_start":145,"line_end":145,"column_start":23,"column_end":32},"alias_span":null,"name":"FloatType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":351},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4693,"byte_end":4711,"line_start":146,"line_end":146,"column_start":15,"column_end":33},"alias_span":null,"name":"FromIntegerLiteral","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1069},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4713,"byte_end":4723,"line_start":146,"line_end":146,"column_start":35,"column_end":45},"alias_span":null,"name":"IntegerLit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1095},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4725,"byte_end":4736,"line_start":146,"line_end":146,"column_start":47,"column_end":58},"alias_span":null,"name":"IntegerBase","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1115},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4738,"byte_end":4749,"line_start":146,"line_end":146,"column_start":60,"column_end":71},"alias_span":null,"name":"IntegerType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1223},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4764,"byte_end":4773,"line_start":147,"line_end":147,"column_start":13,"column_end":22},"alias_span":null,"name":"StringLit","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":0,"byte_end":9430,"line_start":1,"line_end":288,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":23},{"krate":0,"index":54},{"krate":0,"index":99},{"krate":0,"index":133},{"krate":0,"index":208},{"krate":0,"index":243},{"krate":0,"index":283},{"krate":0,"index":310},{"krate":0,"index":365},{"krate":0,"index":409},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":470},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":477},{"krate":0,"index":480},{"krate":0,"index":483},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":490},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":504},{"krate":0,"index":507},{"krate":0,"index":510},{"krate":0,"index":513},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":1245},{"krate":0,"index":1268},{"krate":0,"index":1271},{"krate":0,"index":1274},{"krate":0,"index":1276},{"krate":0,"index":1280},{"krate":0,"index":1282},{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":530},{"krate":0,"index":532},{"krate":0,"index":534},{"krate":0,"index":541},{"krate":0,"index":542}],"decl_id":null,"docs":" Parsing and inspecting Rust literal tokens.","sig":null,"attributes":[{"value":"/ Parsing and inspecting Rust literal tokens.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":0,"byte_end":47,"line_start":1,"line_end":1,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":48,"byte_end":51,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This library offers functionality to parse Rust literals, i.e. tokens in the","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":52,"byte_end":132,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"/ Rust programming language that represent fixed values. The grammar for","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":133,"byte_end":207,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"/ those is defined [here][ref].","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":208,"byte_end":241,"line_start":5,"line_end":5,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":242,"byte_end":245,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ This kind of functionality already exists in the crate `syn`. However, as","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":246,"byte_end":323,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ you oftentimes don't need (nor want) the full power of `syn`, `litrs` was","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":324,"byte_end":401,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ built. This crate also offers a bit more flexibility compared to `syn`","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":402,"byte_end":476,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"/ (only regarding literals, of course).","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":477,"byte_end":518,"line_start":10,"line_end":10,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":519,"byte_end":522,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ---","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":523,"byte_end":530,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":531,"byte_end":534,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The main types of this library are [`Literal`], representing any kind of","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":535,"byte_end":611,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ literal, and `*Lit`, like [`StringLit`] or [`FloatLit`], representing a","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":612,"byte_end":687,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"/ specific kind of literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":688,"byte_end":717,"line_start":16,"line_end":16,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":718,"byte_end":721,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ There are different ways to obtain such a literal type:","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":722,"byte_end":781,"line_start":18,"line_end":18,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":782,"byte_end":785,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - **`parse`**: parses a `&str` or `String` and returns `Result<_,","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":786,"byte_end":855,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/     ParseError>`. For example: [`Literal::parse`] and","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":856,"byte_end":913,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/     [`IntegerLit::parse`].","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":914,"byte_end":944,"line_start":22,"line_end":22,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":945,"byte_end":948,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ - **`From<proc_macro::Literal> for Literal`**: turns a `Literal` value from","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":949,"byte_end":1028,"line_start":24,"line_end":24,"column_start":1,"column_end":80}},{"value":"/     the `proc_macro` crate into a `Literal` from this crate.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1029,"byte_end":1093,"line_start":25,"line_end":25,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1094,"byte_end":1097,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ - **`TryFrom<proc_macro::Literal> for *Lit`**: tries to turn a","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1098,"byte_end":1164,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"/     `proc_macro::Literal` into a specific literal type of this crate. If","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1165,"byte_end":1241,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/     the input is a literal of a different kind, `Err(InvalidToken)` is","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1242,"byte_end":1316,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"/     returned.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1317,"byte_end":1334,"line_start":30,"line_end":30,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1335,"byte_end":1338,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ - **`TryFrom<proc_macro::TokenTree>`**: attempts to turn a token tree into a","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1339,"byte_end":1419,"line_start":32,"line_end":32,"column_start":1,"column_end":81}},{"value":"/     literal type of this crate. An error is returned if the token tree is","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1420,"byte_end":1497,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/     not a literal, or if you are trying to turn it into a specific kind of","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1498,"byte_end":1576,"line_start":34,"line_end":34,"column_start":1,"column_end":79}},{"value":"/     literal and the token tree is a different kind of literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1577,"byte_end":1643,"line_start":35,"line_end":35,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1644,"byte_end":1647,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ All of the `From` and `TryFrom` conversions also work for reference to","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1648,"byte_end":1722,"line_start":37,"line_end":37,"column_start":1,"column_end":75}},{"value":"/ `proc_macro` types. Additionally, if the crate feature `proc-macro2` is","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1723,"byte_end":1798,"line_start":38,"line_end":38,"column_start":1,"column_end":76}},{"value":"/ enabled (which it is by default), all these `From` and `TryFrom` impls also","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1799,"byte_end":1878,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ exist for the corresponding `proc_macro2` types.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1879,"byte_end":1931,"line_start":40,"line_end":40,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1932,"byte_end":1935,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ **Note**: `true` and `false` are `Ident`s when passed to your proc macro.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":1936,"byte_end":2013,"line_start":42,"line_end":42,"column_start":1,"column_end":78}},{"value":"/ The `TryFrom<TokenTree>` impls check for those two special idents and","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2014,"byte_end":2087,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ return a `BoolLit` appropriately. For that reason, there is also no","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2088,"byte_end":2159,"line_start":44,"line_end":44,"column_start":1,"column_end":72}},{"value":"/ `TryFrom<proc_macro::Literal>` impl for `BoolLit`. The `proc_macro::Literal`","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2160,"byte_end":2240,"line_start":45,"line_end":45,"column_start":1,"column_end":81}},{"value":"/ simply cannot represent bool literals.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2241,"byte_end":2283,"line_start":46,"line_end":46,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2284,"byte_end":2287,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2288,"byte_end":2291,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2292,"byte_end":2306,"line_start":49,"line_end":49,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2307,"byte_end":2310,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ In a proc-macro:","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2311,"byte_end":2331,"line_start":51,"line_end":51,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2332,"byte_end":2335,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2336,"byte_end":2349,"line_start":53,"line_end":53,"column_start":1,"column_end":14}},{"value":"/ use std::convert::TryFrom;","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2350,"byte_end":2380,"line_start":54,"line_end":54,"column_start":1,"column_end":31}},{"value":"/ use proc_macro::TokenStream;","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2381,"byte_end":2413,"line_start":55,"line_end":55,"column_start":1,"column_end":33}},{"value":"/ use litrs::FloatLit;","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2414,"byte_end":2438,"line_start":56,"line_end":56,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2439,"byte_end":2442,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ #[proc_macro]","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2443,"byte_end":2460,"line_start":58,"line_end":58,"column_start":1,"column_end":18}},{"value":"/ pub fn foo(input: TokenStream) -> TokenStream {","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2461,"byte_end":2512,"line_start":59,"line_end":59,"column_start":1,"column_end":52}},{"value":"/      let mut input = input.into_iter().collect::<Vec<_>>();","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2513,"byte_end":2576,"line_start":60,"line_end":60,"column_start":1,"column_end":64}},{"value":"/      if input.len() != 1 {","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2577,"byte_end":2607,"line_start":61,"line_end":61,"column_start":1,"column_end":31}},{"value":"/          // Please do proper error handling in your real code!","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2608,"byte_end":2674,"line_start":62,"line_end":62,"column_start":1,"column_end":67}},{"value":"/          panic!(\"expected exactly one token as input\");","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2675,"byte_end":2734,"line_start":63,"line_end":63,"column_start":1,"column_end":60}},{"value":"/      }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2735,"byte_end":2745,"line_start":64,"line_end":64,"column_start":1,"column_end":11}},{"value":"/      let token = input.remove(0);","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2746,"byte_end":2783,"line_start":65,"line_end":65,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2784,"byte_end":2787,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/      match FloatLit::try_from(token) {","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2788,"byte_end":2830,"line_start":67,"line_end":67,"column_start":1,"column_end":43}},{"value":"/          Ok(float_lit) => { /* do something */ }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2831,"byte_end":2883,"line_start":68,"line_end":68,"column_start":1,"column_end":53}},{"value":"/          Err(e) => return e.to_compile_error(),","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2884,"byte_end":2935,"line_start":69,"line_end":69,"column_start":1,"column_end":52}},{"value":"/      }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2936,"byte_end":2946,"line_start":70,"line_end":70,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2947,"byte_end":2950,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/      // Dummy output","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2951,"byte_end":2975,"line_start":72,"line_end":72,"column_start":1,"column_end":25}},{"value":"/      TokenStream::new()","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":2976,"byte_end":3003,"line_start":73,"line_end":73,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3004,"byte_end":3009,"line_start":74,"line_end":74,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3010,"byte_end":3017,"line_start":75,"line_end":75,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3018,"byte_end":3021,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ Parsing from string:","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3022,"byte_end":3046,"line_start":77,"line_end":77,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3047,"byte_end":3050,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3051,"byte_end":3058,"line_start":79,"line_end":79,"column_start":1,"column_end":8}},{"value":"/ use litrs::{FloatLit, Literal};","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3059,"byte_end":3094,"line_start":80,"line_end":80,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3095,"byte_end":3098,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Parse a specific kind of literal (float in this case):","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3099,"byte_end":3160,"line_start":82,"line_end":82,"column_start":1,"column_end":62}},{"value":"/ let float_lit = FloatLit::parse(\"3.14f32\");","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3161,"byte_end":3208,"line_start":83,"line_end":83,"column_start":1,"column_end":48}},{"value":"/ assert!(float_lit.is_ok());","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3209,"byte_end":3240,"line_start":84,"line_end":84,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(float_lit.unwrap().type_suffix(), Some(litrs::FloatType::F32));","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3241,"byte_end":3319,"line_start":85,"line_end":85,"column_start":1,"column_end":79}},{"value":"/ assert!(FloatLit::parse(\"'c'\").is_err());","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3320,"byte_end":3365,"line_start":86,"line_end":86,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3366,"byte_end":3369,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ // Parse any kind of literal. After parsing, you can inspect the literal","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3370,"byte_end":3446,"line_start":88,"line_end":88,"column_start":1,"column_end":77}},{"value":"/ // and decide what to do in each case.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3447,"byte_end":3489,"line_start":89,"line_end":89,"column_start":1,"column_end":43}},{"value":"/ let lit = Literal::parse(\"0xff80\").expect(\"failed to parse literal\");","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3490,"byte_end":3563,"line_start":90,"line_end":90,"column_start":1,"column_end":74}},{"value":"/ match lit {","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3564,"byte_end":3579,"line_start":91,"line_end":91,"column_start":1,"column_end":16}},{"value":"/     Literal::Integer(lit) => { /* ... */ }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3580,"byte_end":3626,"line_start":92,"line_end":92,"column_start":1,"column_end":47}},{"value":"/     Literal::Float(lit) => { /* ... */ }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3627,"byte_end":3671,"line_start":93,"line_end":93,"column_start":1,"column_end":45}},{"value":"/     Literal::Bool(lit) => { /* ... */ }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3672,"byte_end":3715,"line_start":94,"line_end":94,"column_start":1,"column_end":44}},{"value":"/     Literal::Char(lit) => { /* ... */ }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3716,"byte_end":3759,"line_start":95,"line_end":95,"column_start":1,"column_end":44}},{"value":"/     Literal::String(lit) => { /* ... */ }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3760,"byte_end":3805,"line_start":96,"line_end":96,"column_start":1,"column_end":46}},{"value":"/     Literal::Byte(lit) => { /* ... */ }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3806,"byte_end":3849,"line_start":97,"line_end":97,"column_start":1,"column_end":44}},{"value":"/     Literal::ByteString(lit) => { /* ... */ }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3850,"byte_end":3899,"line_start":98,"line_end":98,"column_start":1,"column_end":50}},{"value":"/ }","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3900,"byte_end":3905,"line_start":99,"line_end":99,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3906,"byte_end":3913,"line_start":100,"line_end":100,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3914,"byte_end":3917,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3918,"byte_end":3921,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3922,"byte_end":3925,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ # Crate features","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3926,"byte_end":3946,"line_start":104,"line_end":104,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3947,"byte_end":3950,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ - `proc-macro2` (**default**): adds the dependency `proc_macro2`, a bunch of","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":3951,"byte_end":4031,"line_start":106,"line_end":106,"column_start":1,"column_end":81}},{"value":"/   `From` and `TryFrom` impls, and [`InvalidToken::to_compile_error2`].","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4032,"byte_end":4106,"line_start":107,"line_end":107,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4107,"byte_end":4110,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4111,"byte_end":4114,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ [ref]: https://doc.rust-lang.org/reference/tokens.html#literals","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4115,"byte_end":4182,"line_start":110,"line_end":110,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4183,"byte_end":4186,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":4188,"byte_end":4227,"line_start":113,"line_end":113,"column_start":1,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":549},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":9962,"byte_end":9967,"line_start":15,"line_end":15,"column_start":5,"column_end":10},"name":"False","qualname":"::bool::BoolLit::False","value":"BoolLit::False","parent":{"krate":0,"index":548},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":551},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":9973,"byte_end":9977,"line_start":16,"line_end":16,"column_start":5,"column_end":9},"name":"True","qualname":"::bool::BoolLit::True","value":"BoolLit::True","parent":{"krate":0,"index":548},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":548},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":9948,"byte_end":9955,"line_start":14,"line_end":14,"column_start":10,"column_end":17},"name":"BoolLit","qualname":"::bool::BoolLit","value":"enum BoolLit { False, True, }","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":551}],"decl_id":null,"docs":" A bool literal: `true` or `false`. Also see [the reference][ref].","sig":null,"attributes":[{"value":"/ A bool literal: `true` or `false`. Also see [the reference][ref].","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":9506,"byte_end":9575,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":9576,"byte_end":9579,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Notice that, strictly speaking, from Rust point of view \"boolean literals\" are not","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":9580,"byte_end":9666,"line_start":8,"line_end":8,"column_start":1,"column_end":87}},{"value":"/ actual literals but [keywords].","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":9667,"byte_end":9702,"line_start":9,"line_end":9,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":9703,"byte_end":9706,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ [ref]: https://doc.rust-lang.org/reference/expressions/literal-expr.html#boolean-literal-expressions","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":9707,"byte_end":9811,"line_start":11,"line_end":11,"column_start":1,"column_end":105}},{"value":"/ [keywords]: https://doc.rust-lang.org/reference/keywords.html#strict-keywords","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":9812,"byte_end":9893,"line_start":12,"line_end":12,"column_start":1,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":10144,"byte_end":10149,"line_start":22,"line_end":22,"column_start":12,"column_end":17},"name":"parse","qualname":"<BoolLit>::parse","value":"fn parse(&str) -> Result<Self, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parses the input as a bool literal. Returns an error if the input is\n invalid or represents a different kind of literal.\n","sig":null,"attributes":[{"value":"/ Parses the input as a bool literal. Returns an error if the input is","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":10001,"byte_end":10073,"line_start":20,"line_end":20,"column_start":5,"column_end":77}},{"value":"/ invalid or represents a different kind of literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":10078,"byte_end":10132,"line_start":21,"line_end":21,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":10421,"byte_end":10426,"line_start":31,"line_end":31,"column_start":12,"column_end":17},"name":"value","qualname":"<BoolLit>::value","value":"fn value(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns the actual Boolean value of this literal.\n","sig":null,"attributes":[{"value":"/ Returns the actual Boolean value of this literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":10356,"byte_end":10409,"line_start":30,"line_end":30,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":10597,"byte_end":10603,"line_start":39,"line_end":39,"column_start":12,"column_end":18},"name":"as_str","qualname":"<BoolLit>::as_str","value":"fn as_str(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Returns the literal as string.\n","sig":null,"attributes":[{"value":"/ Returns the literal as string.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":10551,"byte_end":10585,"line_start":38,"line_end":38,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":10778,"byte_end":10781,"line_start":48,"line_end":48,"column_start":8,"column_end":11},"name":"fmt","qualname":"<BoolLit as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":564},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11254,"byte_end":11261,"line_start":16,"line_end":16,"column_start":12,"column_end":19},"name":"ByteLit","qualname":"::byte::ByteLit","value":"ByteLit {  }","parent":null,"children":[{"krate":0,"index":566},{"krate":0,"index":567}],"decl_id":null,"docs":" A (single) byte literal, e.g. `b'k'` or `b'!'`.","sig":null,"attributes":[{"value":"/ A (single) byte literal, e.g. `b'k'` or `b'!'`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11014,"byte_end":11065,"line_start":10,"line_end":10,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11066,"byte_end":11069,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ See [the reference][ref] for more information.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11070,"byte_end":11120,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11121,"byte_end":11124,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [ref]: https://doc.rust-lang.org/reference/tokens.html#byte-literals","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11125,"byte_end":11197,"line_start":14,"line_end":14,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11481,"byte_end":11486,"line_start":24,"line_end":24,"column_start":12,"column_end":17},"name":"parse","qualname":"<ByteLit<B>>::parse","value":"fn parse(B) -> Result<Self, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parses the input as a byte literal. Returns an error if the input is\n invalid or represents a different kind of literal.\n","sig":null,"attributes":[{"value":"/ Parses the input as a byte literal. Returns an error if the input is","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11338,"byte_end":11410,"line_start":22,"line_end":22,"column_start":5,"column_end":77}},{"value":"/ invalid or represents a different kind of literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11415,"byte_end":11469,"line_start":23,"line_end":23,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11879,"byte_end":11884,"line_start":37,"line_end":37,"column_start":12,"column_end":17},"name":"value","qualname":"<ByteLit<B>>::value","value":"fn value(&Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte value that this literal represents.\n","sig":null,"attributes":[{"value":"/ Returns the byte value that this literal represents.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11811,"byte_end":11867,"line_start":36,"line_end":36,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11995,"byte_end":12004,"line_start":42,"line_end":42,"column_start":12,"column_end":21},"name":"raw_input","qualname":"<ByteLit<B>>::raw_input","value":"fn raw_input(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw input that was passed to `parse`.\n","sig":null,"attributes":[{"value":"/ Returns the raw input that was passed to `parse`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11930,"byte_end":11983,"line_start":41,"line_end":41,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":12135,"byte_end":12149,"line_start":47,"line_end":47,"column_start":12,"column_end":26},"name":"into_raw_input","qualname":"<ByteLit<B>>::into_raw_input","value":"fn into_raw_input(Self) -> B","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw input that was passed to `parse`, potentially owned.\n","sig":null,"attributes":[{"value":"/ Returns the raw input that was passed to `parse`, potentially owned.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":12051,"byte_end":12123,"line_start":46,"line_end":46,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":12317,"byte_end":12325,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<ByteLit<&'_ str>>::to_owned","value":"fn to_owned(&Self) -> ByteLit<String>","parent":null,"children":[],"decl_id":null,"docs":" Makes a copy of the underlying buffer and returns the owned version of\n `Self`.\n","sig":null,"attributes":[{"value":"/ Makes a copy of the underlying buffer and returns the owned version of","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":12215,"byte_end":12289,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ `Self`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":12294,"byte_end":12305,"line_start":55,"line_end":55,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":12513,"byte_end":12516,"line_start":65,"line_end":65,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ByteLit<B> as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":587},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":14000,"byte_end":14013,"line_start":16,"line_end":16,"column_start":12,"column_end":25},"name":"ByteStringLit","qualname":"::bytestr::ByteStringLit","value":"ByteStringLit {  }","parent":null,"children":[{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591}],"decl_id":null,"docs":" A byte string or raw byte string literal, e.g. `b\"hello\"` or `br#\"abc\"def\"#`.","sig":null,"attributes":[{"value":"/ A byte string or raw byte string literal, e.g. `b\"hello\"` or `br#\"abc\"def\"#`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":13729,"byte_end":13810,"line_start":10,"line_end":10,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":13811,"byte_end":13814,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ See [the reference][ref] for more information.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":13815,"byte_end":13865,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":13866,"byte_end":13869,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [ref]: https://doc.rust-lang.org/reference/tokens.html#byte-string-literals","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":13870,"byte_end":13949,"line_start":14,"line_end":14,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":14585,"byte_end":14590,"line_start":32,"line_end":32,"column_start":12,"column_end":17},"name":"parse","qualname":"<ByteStringLit<B>>::parse","value":"fn parse(B) -> Result<Self, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parses the input as a (raw) byte string literal. Returns an error if the\n input is invalid or represents a different kind of literal.\n","sig":null,"attributes":[{"value":"/ Parses the input as a (raw) byte string literal. Returns an error if the","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":14429,"byte_end":14505,"line_start":30,"line_end":30,"column_start":5,"column_end":81}},{"value":"/ input is invalid or represents a different kind of literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":14510,"byte_end":14573,"line_start":31,"line_end":31,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":15043,"byte_end":15048,"line_start":45,"line_end":45,"column_start":12,"column_end":17},"name":"value","qualname":"<ByteStringLit<B>>::value","value":"fn value(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the string value this literal represents (where all escapes have\n been turned into their respective values).\n","sig":null,"attributes":[{"value":"/ Returns the string value this literal represents (where all escapes have","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":14904,"byte_end":14980,"line_start":43,"line_end":43,"column_start":5,"column_end":81}},{"value":"/ been turned into their respective values).","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":14985,"byte_end":15031,"line_start":44,"line_end":44,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":15368,"byte_end":15378,"line_start":53,"line_end":53,"column_start":12,"column_end":22},"name":"into_value","qualname":"<ByteStringLit<B>>::into_value","value":"fn into_value(Self) -> B::ByteCow","parent":null,"children":[],"decl_id":null,"docs":" Like `value` but returns a potentially owned version of the value.","sig":null,"attributes":[{"value":"/ Like `value` but returns a potentially owned version of the value.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":15160,"byte_end":15230,"line_start":49,"line_end":49,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":15235,"byte_end":15238,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ The return value is either `Cow<'static, [u8]>` if `B = String`, or","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":15243,"byte_end":15314,"line_start":51,"line_end":51,"column_start":5,"column_end":76}},{"value":"/ `Cow<'a, [u8]>` if `B = &'a str`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":15319,"byte_end":15356,"line_start":52,"line_end":52,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":15691,"byte_end":15709,"line_start":61,"line_end":61,"column_start":12,"column_end":30},"name":"is_raw_byte_string","qualname":"<ByteStringLit<B>>::is_raw_byte_string","value":"fn is_raw_byte_string(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this literal is a raw string literal (starting with\n `r`).\n","sig":null,"attributes":[{"value":"/ Returns whether this literal is a raw string literal (starting with","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":15594,"byte_end":15665,"line_start":59,"line_end":59,"column_start":5,"column_end":76}},{"value":"/ `r`).","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":15670,"byte_end":15679,"line_start":60,"line_end":60,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":15837,"byte_end":15846,"line_start":66,"line_end":66,"column_start":12,"column_end":21},"name":"raw_input","qualname":"<ByteStringLit<B>>::raw_input","value":"fn raw_input(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw input that was passed to `parse`.\n","sig":null,"attributes":[{"value":"/ Returns the raw input that was passed to `parse`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":15772,"byte_end":15825,"line_start":65,"line_end":65,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":15977,"byte_end":15991,"line_start":71,"line_end":71,"column_start":12,"column_end":26},"name":"into_raw_input","qualname":"<ByteStringLit<B>>::into_raw_input","value":"fn into_raw_input(Self) -> B","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw input that was passed to `parse`, potentially owned.\n","sig":null,"attributes":[{"value":"/ Returns the raw input that was passed to `parse`, potentially owned.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":15893,"byte_end":15965,"line_start":70,"line_end":70,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":17108,"byte_end":17118,"line_start":106,"line_end":106,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<ByteStringLit<&'_ str>>::into_owned","value":"fn into_owned(Self) -> ByteStringLit<String>","parent":null,"children":[],"decl_id":null,"docs":" Makes a copy of the underlying buffer and returns the owned version of\n `Self`.\n","sig":null,"attributes":[{"value":"/ Makes a copy of the underlying buffer and returns the owned version of","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":17006,"byte_end":17080,"line_start":104,"line_end":104,"column_start":5,"column_end":79}},{"value":"/ `Self`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":17085,"byte_end":17096,"line_start":105,"line_end":105,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":17364,"byte_end":17367,"line_start":116,"line_end":116,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ByteStringLit<B> as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":609},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":17869,"byte_end":17876,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"CharLit","qualname":"::char::CharLit","value":"CharLit {  }","parent":null,"children":[{"krate":0,"index":611},{"krate":0,"index":612}],"decl_id":null,"docs":" A character literal, e.g. `'g'` or `'🦊'`.","sig":null,"attributes":[{"value":"/ A character literal, e.g. `'g'` or `'🦊'`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":17627,"byte_end":17675,"line_start":11,"line_end":11,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":17676,"byte_end":17679,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ See [the reference][ref] for more information.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":17680,"byte_end":17730,"line_start":13,"line_end":13,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":17731,"byte_end":17734,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [ref]: https://doc.rust-lang.org/reference/tokens.html#character-literals","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":17735,"byte_end":17812,"line_start":15,"line_end":15,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":18103,"byte_end":18108,"line_start":25,"line_end":25,"column_start":12,"column_end":17},"name":"parse","qualname":"<CharLit<B>>::parse","value":"fn parse(B) -> Result<Self, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parses the input as a character literal. Returns an error if the input\n is invalid or represents a different kind of literal.\n","sig":null,"attributes":[{"value":"/ Parses the input as a character literal. Returns an error if the input","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":17955,"byte_end":18029,"line_start":23,"line_end":23,"column_start":5,"column_end":79}},{"value":"/ is invalid or represents a different kind of literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":18034,"byte_end":18091,"line_start":24,"line_end":24,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":18476,"byte_end":18481,"line_start":36,"line_end":36,"column_start":12,"column_end":17},"name":"value","qualname":"<CharLit<B>>::value","value":"fn value(&Self) -> char","parent":null,"children":[],"decl_id":null,"docs":" Returns the character value that this literal represents.\n","sig":null,"attributes":[{"value":"/ Returns the character value that this literal represents.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":18403,"byte_end":18464,"line_start":35,"line_end":35,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":18594,"byte_end":18603,"line_start":41,"line_end":41,"column_start":12,"column_end":21},"name":"raw_input","qualname":"<CharLit<B>>::raw_input","value":"fn raw_input(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw input that was passed to `parse`.\n","sig":null,"attributes":[{"value":"/ Returns the raw input that was passed to `parse`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":18529,"byte_end":18582,"line_start":40,"line_end":40,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":18734,"byte_end":18748,"line_start":46,"line_end":46,"column_start":12,"column_end":26},"name":"into_raw_input","qualname":"<CharLit<B>>::into_raw_input","value":"fn into_raw_input(Self) -> B","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw input that was passed to `parse`, potentially owned.\n","sig":null,"attributes":[{"value":"/ Returns the raw input that was passed to `parse`, potentially owned.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":18650,"byte_end":18722,"line_start":45,"line_end":45,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":18916,"byte_end":18924,"line_start":55,"line_end":55,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<CharLit<&'_ str>>::to_owned","value":"fn to_owned(&Self) -> CharLit<String>","parent":null,"children":[],"decl_id":null,"docs":" Makes a copy of the underlying buffer and returns the owned version of\n `Self`.\n","sig":null,"attributes":[{"value":"/ Makes a copy of the underlying buffer and returns the owned version of","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":18814,"byte_end":18888,"line_start":53,"line_end":53,"column_start":5,"column_end":79}},{"value":"/ `Self`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":18893,"byte_end":18904,"line_start":54,"line_end":54,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":19112,"byte_end":19115,"line_start":64,"line_end":64,"column_start":8,"column_end":11},"name":"fmt","qualname":"<CharLit<B> as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":632},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":20306,"byte_end":20318,"line_start":7,"line_end":7,"column_start":12,"column_end":24},"name":"InvalidToken","qualname":"::err::InvalidToken","value":"InvalidToken {  }","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635}],"decl_id":null,"docs":" An error signaling that a different kind of token was expected. Returned by\n the various `TryFrom` impls.\n","sig":null,"attributes":[{"value":"/ An error signaling that a different kind of token was expected. Returned by","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":20152,"byte_end":20231,"line_start":4,"line_end":4,"column_start":1,"column_end":80}},{"value":"/ the various `TryFrom` impls.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":20232,"byte_end":20264,"line_start":5,"line_end":5,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":20642,"byte_end":20658,"line_start":17,"line_end":17,"column_start":12,"column_end":28},"name":"to_compile_error","qualname":"<InvalidToken>::to_compile_error","value":"fn to_compile_error(&Self) -> proc_macro::TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Returns a token stream representing `compile_error!(\"msg\");` where\n `\"msg\"` is the output of `self.to_string()`. **Panics if called outside\n of a proc-macro context!**\n","sig":null,"attributes":[{"value":"/ Returns a token stream representing `compile_error!(\"msg\");` where","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":20445,"byte_end":20515,"line_start":14,"line_end":14,"column_start":5,"column_end":75}},{"value":"/ `\"msg\"` is the output of `self.to_string()`. **Panics if called outside","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":20520,"byte_end":20595,"line_start":15,"line_end":15,"column_start":5,"column_end":80}},{"value":"/ of a proc-macro context!**","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":20600,"byte_end":20630,"line_start":16,"line_end":16,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":21611,"byte_end":21628,"line_start":43,"line_end":43,"column_start":12,"column_end":29},"name":"to_compile_error2","qualname":"<InvalidToken>::to_compile_error2","value":"fn to_compile_error2(&Self) -> proc_macro2::TokenStream","parent":null,"children":[],"decl_id":null,"docs":" Like [`to_compile_error`][Self::to_compile_error], but returns a token\n stream from `proc_macro2` and does not panic outside of a proc-macro\n context.\n","sig":null,"attributes":[{"value":"/ Like [`to_compile_error`][Self::to_compile_error], but returns a token","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":21395,"byte_end":21469,"line_start":39,"line_end":39,"column_start":5,"column_end":79}},{"value":"/ stream from `proc_macro2` and does not panic outside of a proc-macro","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":21474,"byte_end":21546,"line_start":40,"line_end":40,"column_start":5,"column_end":77}},{"value":"/ context.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":21551,"byte_end":21563,"line_start":41,"line_end":41,"column_start":5,"column_end":17}},{"value":"cfg(feature = \"proc-macro2\")","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":21568,"byte_end":21599,"line_start":42,"line_end":42,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":22426,"byte_end":22429,"line_start":68,"line_end":68,"column_start":8,"column_end":11},"name":"fmt","qualname":"<InvalidToken as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":687},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25494,"byte_end":25504,"line_start":154,"line_end":154,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::err::ParseError","value":"ParseError {  }","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":689}],"decl_id":null,"docs":" Errors during parsing.","sig":null,"attributes":[{"value":"/ Errors during parsing.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24131,"byte_end":24157,"line_start":125,"line_end":125,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24158,"byte_end":24161,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ This type should be seen primarily for error reporting and not for catching","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24162,"byte_end":24241,"line_start":127,"line_end":127,"column_start":1,"column_end":80}},{"value":"/ specific cases. The span and error kind are not guaranteed to be stable","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24242,"byte_end":24317,"line_start":128,"line_end":128,"column_start":1,"column_end":76}},{"value":"/ over different versions of this library, meaning that a returned error can","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24318,"byte_end":24396,"line_start":129,"line_end":129,"column_start":1,"column_end":79}},{"value":"/ change from one version to the next. There are simply too many fringe cases","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24397,"byte_end":24476,"line_start":130,"line_end":130,"column_start":1,"column_end":80}},{"value":"/ that are not easy to classify as a specific error kind. It depends entirely","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24477,"byte_end":24556,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ on the specific parser code how an invalid input is categorized.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24557,"byte_end":24625,"line_start":132,"line_end":132,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24626,"byte_end":24629,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ Consider these examples:","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24630,"byte_end":24658,"line_start":134,"line_end":134,"column_start":1,"column_end":29}},{"value":"/ - `'\\` can be seen as","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24659,"byte_end":24684,"line_start":135,"line_end":135,"column_start":1,"column_end":26}},{"value":"/     - invalid escape in character literal, or","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24685,"byte_end":24734,"line_start":136,"line_end":136,"column_start":1,"column_end":50}},{"value":"/     - unterminated character literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24735,"byte_end":24776,"line_start":137,"line_end":137,"column_start":1,"column_end":42}},{"value":"/ - `'''` can be seen as","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24777,"byte_end":24803,"line_start":138,"line_end":138,"column_start":1,"column_end":27}},{"value":"/     - empty character literal, or","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24804,"byte_end":24841,"line_start":139,"line_end":139,"column_start":1,"column_end":38}},{"value":"/     - unescaped quote character in character literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24842,"byte_end":24899,"line_start":140,"line_end":140,"column_start":1,"column_end":58}},{"value":"/ - `0b64` can be seen as","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24900,"byte_end":24927,"line_start":141,"line_end":141,"column_start":1,"column_end":28}},{"value":"/     - binary integer literal with invalid digit 6, or","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24928,"byte_end":24985,"line_start":142,"line_end":142,"column_start":1,"column_end":58}},{"value":"/     - binary integer literal with invalid digit 4, or","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24986,"byte_end":25043,"line_start":143,"line_end":143,"column_start":1,"column_end":58}},{"value":"/     - decimal integer literal with invalid digit b, or","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25044,"byte_end":25102,"line_start":144,"line_end":144,"column_start":1,"column_end":59}},{"value":"/     - decimal integer literal 0 with unknown type suffix `b64`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25103,"byte_end":25170,"line_start":145,"line_end":145,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25171,"byte_end":25174,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ If you want to see more if these examples, feel free to check out the unit","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25175,"byte_end":25253,"line_start":147,"line_end":147,"column_start":1,"column_end":79}},{"value":"/ tests of this library.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25254,"byte_end":25280,"line_start":148,"line_end":148,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25281,"byte_end":25284,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ While this library does its best to emit sensible and precise errors, and to","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25285,"byte_end":25365,"line_start":150,"line_end":150,"column_start":1,"column_end":81}},{"value":"/ keep the returned errors as stable as possible, full stability cannot be","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25366,"byte_end":25442,"line_start":151,"line_end":151,"column_start":1,"column_end":77}},{"value":"/ guaranteed.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25443,"byte_end":25458,"line_start":152,"line_end":152,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25835,"byte_end":25839,"line_start":163,"line_end":163,"column_start":12,"column_end":16},"name":"span","qualname":"<ParseError>::span","value":"fn span(&Self) -> Option<Range<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a span of this error, if available. **Note**: the returned span\n might change in future versions of this library. See [the documentation\n of this type][ParseError] for more information.\n","sig":null,"attributes":[{"value":"/ Returns a span of this error, if available. **Note**: the returned span","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25612,"byte_end":25687,"line_start":160,"line_end":160,"column_start":5,"column_end":80}},{"value":"/ might change in future versions of this library. See [the documentation","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25692,"byte_end":25767,"line_start":161,"line_end":161,"column_start":5,"column_end":80}},{"value":"/ of this type][ParseError] for more information.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25772,"byte_end":25823,"line_start":162,"line_end":162,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":30069,"byte_end":30072,"line_start":317,"line_end":317,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ParseError as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":778},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":42648,"byte_end":42656,"line_start":23,"line_end":23,"column_start":12,"column_end":20},"name":"FloatLit","qualname":"::float::FloatLit","value":"FloatLit {  }","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784}],"decl_id":null,"docs":" A floating point literal, e.g. `3.14`, `8.`, `135e12`, `27f32` or `1.956e2f64`.","sig":null,"attributes":[{"value":"/ A floating point literal, e.g. `3.14`, `8.`, `135e12`, `27f32` or `1.956e2f64`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":42101,"byte_end":42184,"line_start":11,"line_end":11,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":42185,"byte_end":42188,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This kind of literal has several forms, but generally consists of a main","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":42189,"byte_end":42265,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ number part, an optional exponent and an optional type suffix. See","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":42266,"byte_end":42336,"line_start":14,"line_end":14,"column_start":1,"column_end":71}},{"value":"/ [the reference][ref] for more information.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":42337,"byte_end":42383,"line_start":15,"line_end":15,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":42384,"byte_end":42387,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ A leading minus sign `-` is not part of the literal grammar! `-3.14` are two","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":42388,"byte_end":42468,"line_start":17,"line_end":17,"column_start":1,"column_end":81}},{"value":"/ tokens in the Rust grammar.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":42469,"byte_end":42500,"line_start":18,"line_end":18,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":42501,"byte_end":42504,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":42505,"byte_end":42508,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ [ref]: https://doc.rust-lang.org/reference/tokens.html#floating-point-literals","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":42509,"byte_end":42591,"line_start":21,"line_end":21,"column_start":1,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":805},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":43919,"byte_end":43922,"line_start":63,"line_end":63,"column_start":5,"column_end":8},"name":"F32","qualname":"::float::FloatType::F32","value":"FloatType::F32","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":807},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":43928,"byte_end":43931,"line_start":64,"line_end":64,"column_start":5,"column_end":8},"name":"F64","qualname":"::float::FloatType::F64","value":"FloatType::F64","parent":{"krate":0,"index":804},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":804},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":43903,"byte_end":43912,"line_start":62,"line_end":62,"column_start":10,"column_end":19},"name":"FloatType","qualname":"::float::FloatType","value":"enum FloatType { F32, F64, }","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":807}],"decl_id":null,"docs":" All possible float type suffixes.\n","sig":null,"attributes":[{"value":"/ All possible float type suffixes.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":43811,"byte_end":43848,"line_start":60,"line_end":60,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":44123,"byte_end":44128,"line_start":70,"line_end":70,"column_start":12,"column_end":17},"name":"parse","qualname":"<FloatLit<B>>::parse","value":"fn parse(B) -> Result<Self, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parses the input as a floating point literal. Returns an error if the\n input is invalid or represents a different kind of literal.\n","sig":null,"attributes":[{"value":"/ Parses the input as a floating point literal. Returns an error if the","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":43970,"byte_end":44043,"line_start":68,"line_end":68,"column_start":5,"column_end":78}},{"value":"/ input is invalid or represents a different kind of literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":44048,"byte_end":44111,"line_start":69,"line_end":69,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":45127,"byte_end":45138,"line_start":98,"line_end":98,"column_start":12,"column_end":23},"name":"number_part","qualname":"<FloatLit<B>>::number_part","value":"fn number_part(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the whole number part (including integer part, fractional part\n and exponent), but without the type suffix. If you want an actual\n floating point value, you need to parse this string, e.g. with\n `f32::from_str` or an external crate.\n","sig":null,"attributes":[{"value":"/ Returns the whole number part (including integer part, fractional part","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":44850,"byte_end":44924,"line_start":94,"line_end":94,"column_start":5,"column_end":79}},{"value":"/ and exponent), but without the type suffix. If you want an actual","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":44929,"byte_end":44998,"line_start":95,"line_end":95,"column_start":5,"column_end":74}},{"value":"/ floating point value, you need to parse this string, e.g. with","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":45003,"byte_end":45069,"line_start":96,"line_end":96,"column_start":5,"column_end":71}},{"value":"/ `f32::from_str` or an external crate.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":45074,"byte_end":45115,"line_start":97,"line_end":97,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":45279,"byte_end":45291,"line_start":103,"line_end":103,"column_start":12,"column_end":24},"name":"integer_part","qualname":"<FloatLit<B>>::integer_part","value":"fn integer_part(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the non-empty integer part of this literal.\n","sig":null,"attributes":[{"value":"/ Returns the non-empty integer part of this literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":45212,"byte_end":45267,"line_start":102,"line_end":102,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":45606,"byte_end":45621,"line_start":110,"line_end":110,"column_start":12,"column_end":27},"name":"fractional_part","qualname":"<FloatLit<B>>::fractional_part","value":"fn fractional_part(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Returns the optional fractional part of this literal. Does not include\n the period. If a period exists in the input, `Some` is returned, `None`\n otherwise. Note that `Some(\"\")` might be returned, e.g. for `3.`.\n","sig":null,"attributes":[{"value":"/ Returns the optional fractional part of this literal. Does not include","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":45366,"byte_end":45440,"line_start":107,"line_end":107,"column_start":5,"column_end":79}},{"value":"/ the period. If a period exists in the input, `Some` is returned, `None`","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":45445,"byte_end":45520,"line_start":108,"line_end":108,"column_start":5,"column_end":80}},{"value":"/ otherwise. Note that `Some(\"\")` might be returned, e.g. for `3.`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":45525,"byte_end":45594,"line_start":109,"line_end":109,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":45997,"byte_end":46010,"line_start":120,"line_end":120,"column_start":12,"column_end":25},"name":"exponent_part","qualname":"<FloatLit<B>>::exponent_part","value":"fn exponent_part(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Optional exponent part. Might be empty if there was no exponent part in\n the input. Includes the `e` or `E` at the beginning.\n","sig":null,"attributes":[{"value":"/ Optional exponent part. Might be empty if there was no exponent part in","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":45849,"byte_end":45924,"line_start":118,"line_end":118,"column_start":5,"column_end":80}},{"value":"/ the input. Includes the `e` or `E` at the beginning.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":45929,"byte_end":45985,"line_start":119,"line_end":119,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":46149,"byte_end":46160,"line_start":125,"line_end":125,"column_start":12,"column_end":23},"name":"type_suffix","qualname":"<FloatLit<B>>::type_suffix","value":"fn type_suffix(&Self) -> Option<FloatType>","parent":null,"children":[],"decl_id":null,"docs":" The optional type suffix.\n","sig":null,"attributes":[{"value":"/ The optional type suffix.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":46108,"byte_end":46137,"line_start":124,"line_end":124,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":46292,"byte_end":46301,"line_start":130,"line_end":130,"column_start":12,"column_end":21},"name":"raw_input","qualname":"<FloatLit<B>>::raw_input","value":"fn raw_input(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw input that was passed to `parse`.\n","sig":null,"attributes":[{"value":"/ Returns the raw input that was passed to `parse`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":46227,"byte_end":46280,"line_start":129,"line_end":129,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":46432,"byte_end":46446,"line_start":135,"line_end":135,"column_start":12,"column_end":26},"name":"into_raw_input","qualname":"<FloatLit<B>>::into_raw_input","value":"fn into_raw_input(Self) -> B","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw input that was passed to `parse`, potentially owned.\n","sig":null,"attributes":[{"value":"/ Returns the raw input that was passed to `parse`, potentially owned.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":46348,"byte_end":46420,"line_start":134,"line_end":134,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":46614,"byte_end":46622,"line_start":143,"line_end":143,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<FloatLit<&'_ str>>::to_owned","value":"fn to_owned(&Self) -> FloatLit<String>","parent":null,"children":[],"decl_id":null,"docs":" Makes a copy of the underlying buffer and returns the owned version of\n `Self`.\n","sig":null,"attributes":[{"value":"/ Makes a copy of the underlying buffer and returns the owned version of","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":46512,"byte_end":46586,"line_start":141,"line_end":141,"column_start":5,"column_end":79}},{"value":"/ `Self`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":46591,"byte_end":46602,"line_start":142,"line_end":142,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":46988,"byte_end":46991,"line_start":155,"line_end":155,"column_start":8,"column_end":11},"name":"fmt","qualname":"<FloatLit<B> as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1069},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67501,"byte_end":67511,"line_start":27,"line_end":27,"column_start":12,"column_end":22},"name":"IntegerLit","qualname":"::integer::IntegerLit","value":"IntegerLit {  }","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075}],"decl_id":null,"docs":" An integer literal, e.g. `27`, `0x7F`, `0b101010u8` or `5_000_000i64`.","sig":null,"attributes":[{"value":"/ An integer literal, e.g. `27`, `0x7F`, `0b101010u8` or `5_000_000i64`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":66518,"byte_end":66592,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":66593,"byte_end":66596,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ An integer literal consists of an optional base prefix (`0b`, `0o`, `0x`),","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":66597,"byte_end":66675,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/ the main part (digits and underscores), and an optional type suffix","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":66676,"byte_end":66747,"line_start":13,"line_end":13,"column_start":1,"column_end":72}},{"value":"/ (e.g. `u64` or `i8`). See [the reference][ref] for more information.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":66748,"byte_end":66820,"line_start":14,"line_end":14,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":66821,"byte_end":66824,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Note that integer literals are always positive: the grammar does not contain","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":66825,"byte_end":66905,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ the minus sign at all. The minus sign is just the unary negate operator,","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":66906,"byte_end":66982,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/ not part of the literal. Which is interesting for cases like `- 128i8`:","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":66983,"byte_end":67058,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ here, the literal itself would overflow the specified type (`i8` cannot","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67059,"byte_end":67134,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ represent 128). That's why in rustc, the literal overflow check is","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67135,"byte_end":67205,"line_start":20,"line_end":20,"column_start":1,"column_end":71}},{"value":"/ performed as a lint after parsing, not during the lexing stage. Similarly,","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67206,"byte_end":67284,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ [`IntegerLit::parse`] does not perform an overflow check.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67285,"byte_end":67346,"line_start":22,"line_end":22,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67347,"byte_end":67350,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [ref]: https://doc.rust-lang.org/reference/tokens.html#integer-literals","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67351,"byte_end":67426,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"non_exhaustive","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67472,"byte_end":67489,"line_start":26,"line_end":26,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1096},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67900,"byte_end":67906,"line_start":40,"line_end":40,"column_start":5,"column_end":11},"name":"Binary","qualname":"::integer::IntegerBase::Binary","value":"IntegerBase::Binary","parent":{"krate":0,"index":1095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1098},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67912,"byte_end":67917,"line_start":41,"line_end":41,"column_start":5,"column_end":10},"name":"Octal","qualname":"::integer::IntegerBase::Octal","value":"IntegerBase::Octal","parent":{"krate":0,"index":1095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1100},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67923,"byte_end":67930,"line_start":42,"line_end":42,"column_start":5,"column_end":12},"name":"Decimal","qualname":"::integer::IntegerBase::Decimal","value":"IntegerBase::Decimal","parent":{"krate":0,"index":1095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1102},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67936,"byte_end":67947,"line_start":43,"line_end":43,"column_start":5,"column_end":16},"name":"Hexadecimal","qualname":"::integer::IntegerBase::Hexadecimal","value":"IntegerBase::Hexadecimal","parent":{"krate":0,"index":1095},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1095},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67882,"byte_end":67893,"line_start":39,"line_end":39,"column_start":10,"column_end":21},"name":"IntegerBase","qualname":"::integer::IntegerBase","value":"enum IntegerBase { Binary, Octal, Decimal, Hexadecimal, }","parent":null,"children":[{"krate":0,"index":1096},{"krate":0,"index":1098},{"krate":0,"index":1100},{"krate":0,"index":1102}],"decl_id":null,"docs":" The bases in which an integer can be specified.\n","sig":null,"attributes":[{"value":"/ The bases in which an integer can be specified.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67776,"byte_end":67827,"line_start":37,"line_end":37,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1116},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68064,"byte_end":68066,"line_start":49,"line_end":49,"column_start":5,"column_end":7},"name":"U8","qualname":"::integer::IntegerType::U8","value":"IntegerType::U8","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1118},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68072,"byte_end":68075,"line_start":50,"line_end":50,"column_start":5,"column_end":8},"name":"U16","qualname":"::integer::IntegerType::U16","value":"IntegerType::U16","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1120},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68081,"byte_end":68084,"line_start":51,"line_end":51,"column_start":5,"column_end":8},"name":"U32","qualname":"::integer::IntegerType::U32","value":"IntegerType::U32","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1122},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68090,"byte_end":68093,"line_start":52,"line_end":52,"column_start":5,"column_end":8},"name":"U64","qualname":"::integer::IntegerType::U64","value":"IntegerType::U64","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1124},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68099,"byte_end":68103,"line_start":53,"line_end":53,"column_start":5,"column_end":9},"name":"U128","qualname":"::integer::IntegerType::U128","value":"IntegerType::U128","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1126},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68109,"byte_end":68114,"line_start":54,"line_end":54,"column_start":5,"column_end":10},"name":"Usize","qualname":"::integer::IntegerType::Usize","value":"IntegerType::Usize","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1128},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68120,"byte_end":68122,"line_start":55,"line_end":55,"column_start":5,"column_end":7},"name":"I8","qualname":"::integer::IntegerType::I8","value":"IntegerType::I8","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1130},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68128,"byte_end":68131,"line_start":56,"line_end":56,"column_start":5,"column_end":8},"name":"I16","qualname":"::integer::IntegerType::I16","value":"IntegerType::I16","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1132},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68137,"byte_end":68140,"line_start":57,"line_end":57,"column_start":5,"column_end":8},"name":"I32","qualname":"::integer::IntegerType::I32","value":"IntegerType::I32","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1134},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68146,"byte_end":68149,"line_start":58,"line_end":58,"column_start":5,"column_end":8},"name":"I64","qualname":"::integer::IntegerType::I64","value":"IntegerType::I64","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1136},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68155,"byte_end":68159,"line_start":59,"line_end":59,"column_start":5,"column_end":9},"name":"I128","qualname":"::integer::IntegerType::I128","value":"IntegerType::I128","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1138},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68165,"byte_end":68170,"line_start":60,"line_end":60,"column_start":5,"column_end":10},"name":"Isize","qualname":"::integer::IntegerType::Isize","value":"IntegerType::Isize","parent":{"krate":0,"index":1115},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1115},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68046,"byte_end":68057,"line_start":48,"line_end":48,"column_start":10,"column_end":21},"name":"IntegerType","qualname":"::integer::IntegerType","value":"enum IntegerType {\n    U8,\n    U16,\n    U32,\n    U64,\n    U128,\n    Usize,\n    I8,\n    I16,\n    I32,\n    I64,\n    I128,\n    Isize,\n}","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1136},{"krate":0,"index":1138}],"decl_id":null,"docs":" All possible integer type suffixes.\n","sig":null,"attributes":[{"value":"/ All possible integer type suffixes.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":67952,"byte_end":67991,"line_start":46,"line_end":46,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68312,"byte_end":68318,"line_start":66,"line_end":66,"column_start":12,"column_end":18},"name":"prefix","qualname":"<IntegerBase>::prefix","value":"fn prefix(Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Returns the literal prefix that indicates this base, i.e. `\"0b\"`,\n `\"0o\"`, `\"\"` and `\"0x\"`.\n","sig":null,"attributes":[{"value":"/ Returns the literal prefix that indicates this base, i.e. `\"0b\"`,","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68198,"byte_end":68267,"line_start":64,"line_end":64,"column_start":5,"column_end":74}},{"value":"/ `\"0o\"`, `\"\"` and `\"0x\"`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68272,"byte_end":68300,"line_start":65,"line_end":65,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68705,"byte_end":68710,"line_start":79,"line_end":79,"column_start":12,"column_end":17},"name":"parse","qualname":"<IntegerLit<B>>::parse","value":"fn parse(B) -> Result<Self, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parses the input as an integer literal. Returns an error if the input is\n invalid or represents a different kind of literal.\n","sig":null,"attributes":[{"value":"/ Parses the input as an integer literal. Returns an error if the input is","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68558,"byte_end":68634,"line_start":77,"line_end":77,"column_start":5,"column_end":81}},{"value":"/ invalid or represents a different kind of literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68639,"byte_end":68693,"line_start":78,"line_end":78,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":69722,"byte_end":69727,"line_start":108,"line_end":108,"column_start":12,"column_end":17},"name":"value","qualname":"<IntegerLit<B>>::value","value":"fn value<N>(&Self) -> Option<N> where N: FromIntegerLiteral","parent":null,"children":[],"decl_id":null,"docs":" Performs the actual string to int conversion to obtain the integer\n value. The optional type suffix of the literal **is ignored by this\n method**. This means `N` does not need to match the type suffix!","sig":null,"attributes":[{"value":"/ Performs the actual string to int conversion to obtain the integer","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":69430,"byte_end":69500,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/ value. The optional type suffix of the literal **is ignored by this","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":69505,"byte_end":69576,"line_start":104,"line_end":104,"column_start":5,"column_end":76}},{"value":"/ method**. This means `N` does not need to match the type suffix!","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":69581,"byte_end":69649,"line_start":105,"line_end":105,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":69654,"byte_end":69657,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the literal overflows `N`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":69662,"byte_end":69710,"line_start":107,"line_end":107,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":70729,"byte_end":70733,"line_start":135,"line_end":135,"column_start":12,"column_end":16},"name":"base","qualname":"<IntegerLit<B>>::base","value":"fn base(&Self) -> IntegerBase","parent":null,"children":[],"decl_id":null,"docs":" The base of this integer literal.\n","sig":null,"attributes":[{"value":"/ The base of this integer literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":70680,"byte_end":70717,"line_start":134,"line_end":134,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":70932,"byte_end":70945,"line_start":141,"line_end":141,"column_start":12,"column_end":25},"name":"raw_main_part","qualname":"<IntegerLit<B>>::raw_main_part","value":"fn raw_main_part(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" The main part containing the digits and potentially `_`. Do not try to\n parse this directly as that would ignore the base!\n","sig":null,"attributes":[{"value":"/ The main part containing the digits and potentially `_`. Do not try to","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":70787,"byte_end":70861,"line_start":139,"line_end":139,"column_start":5,"column_end":79}},{"value":"/ parse this directly as that would ignore the base!","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":70866,"byte_end":70920,"line_start":140,"line_end":140,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71083,"byte_end":71094,"line_start":146,"line_end":146,"column_start":12,"column_end":23},"name":"type_suffix","qualname":"<IntegerLit<B>>::type_suffix","value":"fn type_suffix(&Self) -> Option<IntegerType>","parent":null,"children":[],"decl_id":null,"docs":" The type suffix, if specified.\n","sig":null,"attributes":[{"value":"/ The type suffix, if specified.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71037,"byte_end":71071,"line_start":145,"line_end":145,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71228,"byte_end":71237,"line_start":151,"line_end":151,"column_start":12,"column_end":21},"name":"raw_input","qualname":"<IntegerLit<B>>::raw_input","value":"fn raw_input(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw input that was passed to `parse`.\n","sig":null,"attributes":[{"value":"/ Returns the raw input that was passed to `parse`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71163,"byte_end":71216,"line_start":150,"line_end":150,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71368,"byte_end":71382,"line_start":156,"line_end":156,"column_start":12,"column_end":26},"name":"into_raw_input","qualname":"<IntegerLit<B>>::into_raw_input","value":"fn into_raw_input(Self) -> B","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw input that was passed to `parse`, potentially owned.\n","sig":null,"attributes":[{"value":"/ Returns the raw input that was passed to `parse`, potentially owned.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71284,"byte_end":71356,"line_start":155,"line_end":155,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":347},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71552,"byte_end":71560,"line_start":164,"line_end":164,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<IntegerLit<&'_ str>>::to_owned","value":"fn to_owned(&Self) -> IntegerLit<String>","parent":null,"children":[],"decl_id":null,"docs":" Makes a copy of the underlying buffer and returns the owned version of\n `Self`.\n","sig":null,"attributes":[{"value":"/ Makes a copy of the underlying buffer and returns the owned version of","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71450,"byte_end":71524,"line_start":162,"line_end":162,"column_start":5,"column_end":79}},{"value":"/ `Self`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71529,"byte_end":71540,"line_start":163,"line_end":163,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71896,"byte_end":71899,"line_start":176,"line_end":176,"column_start":8,"column_end":11},"name":"fmt","qualname":"<IntegerLit<B> as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":351},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":72281,"byte_end":72299,"line_start":186,"line_end":186,"column_start":11,"column_end":29},"name":"FromIntegerLiteral","qualname":"::integer::FromIntegerLiteral","value":"FromIntegerLiteral: self::sealed::Sealed + Copy","parent":null,"children":[{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355}],"decl_id":null,"docs":" Integer literal types. *Implementation detail*.","sig":null,"attributes":[{"value":"/ Integer literal types. *Implementation detail*.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71997,"byte_end":72048,"line_start":181,"line_end":181,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":72049,"byte_end":72052,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ Implemented for all integer literal types. This trait is sealed and cannot","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":72053,"byte_end":72131,"line_start":183,"line_end":183,"column_start":1,"column_end":79}},{"value":"/ be implemented outside of this crate. The trait's methods are implementation","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":72132,"byte_end":72212,"line_start":184,"line_end":184,"column_start":1,"column_end":81}},{"value":"/ detail of this library and are not subject to semver.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":72213,"byte_end":72270,"line_start":185,"line_end":185,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":72436,"byte_end":72453,"line_start":189,"line_end":189,"column_start":8,"column_end":25},"name":"from_small_number","qualname":"::integer::FromIntegerLiteral::from_small_number","value":"fn from_small_number(u8) -> Self","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" Creates itself from the given number. `n` is guaranteed to be `<= 16`.\n","sig":null,"attributes":[{"value":"/ Creates itself from the given number. `n` is guaranteed to be `<= 16`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":72335,"byte_end":72409,"line_start":187,"line_end":187,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":72497,"byte_end":72508,"line_start":192,"line_end":192,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::integer::FromIntegerLiteral::checked_add","value":"fn checked_add(Self, Self) -> Option<Self>","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":72570,"byte_end":72581,"line_start":195,"line_end":195,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::integer::FromIntegerLiteral::checked_mul","value":"fn checked_mul(Self, Self) -> Option<Self>","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":72643,"byte_end":72645,"line_start":198,"line_end":198,"column_start":8,"column_end":10},"name":"ty","qualname":"::integer::FromIntegerLiteral::ty","value":"fn ty() -> IntegerType","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":358},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":73559,"byte_end":73565,"line_start":229,"line_end":229,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::integer::sealed::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/parse.rs","byte_start":76537,"byte_end":76542,"line_start":18,"line_end":18,"column_start":12,"column_end":17},"name":"parse","qualname":"<Literal<B>>::parse","value":"fn parse(B) -> Result<Self, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parses the given input as a Rust literal.\n","sig":null,"attributes":[{"value":"/ Parses the given input as a Rust literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/parse.rs","byte_start":76480,"byte_end":76525,"line_start":17,"line_end":17,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1223},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":79696,"byte_end":79705,"line_start":17,"line_end":17,"column_start":12,"column_end":21},"name":"StringLit","qualname":"::string::StringLit","value":"StringLit {  }","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227}],"decl_id":null,"docs":" A string or raw string literal, e.g. `\"foo\"`, `\"Grüße\"` or `r#\"a🦊c\"d🦀f\"#`.","sig":null,"attributes":[{"value":"/ A string or raw string literal, e.g. `\"foo\"`, `\"Grüße\"` or `r#\"a🦊c\"d🦀f\"#`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":79425,"byte_end":79511,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":79512,"byte_end":79515,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ See [the reference][ref] for more information.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":79516,"byte_end":79566,"line_start":13,"line_end":13,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":79567,"byte_end":79570,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [ref]: https://doc.rust-lang.org/reference/tokens.html#string-literals","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":79571,"byte_end":79645,"line_start":15,"line_end":15,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":80267,"byte_end":80272,"line_start":33,"line_end":33,"column_start":12,"column_end":17},"name":"parse","qualname":"<StringLit<B>>::parse","value":"fn parse(B) -> Result<Self, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Parses the input as a (raw) string literal. Returns an error if the\n input is invalid or represents a different kind of literal.\n","sig":null,"attributes":[{"value":"/ Parses the input as a (raw) string literal. Returns an error if the","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":80116,"byte_end":80187,"line_start":31,"line_end":31,"column_start":5,"column_end":76}},{"value":"/ input is invalid or represents a different kind of literal.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":80192,"byte_end":80255,"line_start":32,"line_end":32,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":80628,"byte_end":80633,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"value","qualname":"<StringLit<B>>::value","value":"fn value(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the string value this literal represents (where all escapes have\n been turned into their respective values).\n","sig":null,"attributes":[{"value":"/ Returns the string value this literal represents (where all escapes have","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":80489,"byte_end":80565,"line_start":40,"line_end":40,"column_start":5,"column_end":81}},{"value":"/ been turned into their respective values).","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":80570,"byte_end":80616,"line_start":41,"line_end":41,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":80939,"byte_end":80949,"line_start":50,"line_end":50,"column_start":12,"column_end":22},"name":"into_value","qualname":"<StringLit<B>>::into_value","value":"fn into_value(Self) -> B::Cow","parent":null,"children":[],"decl_id":null,"docs":" Like `value` but returns a potentially owned version of the value.","sig":null,"attributes":[{"value":"/ Like `value` but returns a potentially owned version of the value.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":80733,"byte_end":80803,"line_start":46,"line_end":46,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":80808,"byte_end":80811,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ The return value is either `Cow<'static, str>` if `B = String`, or","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":80816,"byte_end":80886,"line_start":48,"line_end":48,"column_start":5,"column_end":75}},{"value":"/ `Cow<'a, str>` if `B = &'a str`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":80891,"byte_end":80927,"line_start":49,"line_end":49,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":81249,"byte_end":81262,"line_start":58,"line_end":58,"column_start":12,"column_end":25},"name":"is_raw_string","qualname":"<StringLit<B>>::is_raw_string","value":"fn is_raw_string(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this literal is a raw string literal (starting with\n `r`).\n","sig":null,"attributes":[{"value":"/ Returns whether this literal is a raw string literal (starting with","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":81152,"byte_end":81223,"line_start":56,"line_end":56,"column_start":5,"column_end":76}},{"value":"/ `r`).","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":81228,"byte_end":81237,"line_start":57,"line_end":57,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":81390,"byte_end":81399,"line_start":63,"line_end":63,"column_start":12,"column_end":21},"name":"raw_input","qualname":"<StringLit<B>>::raw_input","value":"fn raw_input(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw input that was passed to `parse`.\n","sig":null,"attributes":[{"value":"/ Returns the raw input that was passed to `parse`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":81325,"byte_end":81378,"line_start":62,"line_end":62,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":81530,"byte_end":81544,"line_start":68,"line_end":68,"column_start":12,"column_end":26},"name":"into_raw_input","qualname":"<StringLit<B>>::into_raw_input","value":"fn into_raw_input(Self) -> B","parent":null,"children":[],"decl_id":null,"docs":" Returns the raw input that was passed to `parse`, potentially owned.\n","sig":null,"attributes":[{"value":"/ Returns the raw input that was passed to `parse`, potentially owned.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":81446,"byte_end":81518,"line_start":67,"line_end":67,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":82602,"byte_end":82612,"line_start":103,"line_end":103,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<StringLit<&'_ str>>::into_owned","value":"fn into_owned(Self) -> StringLit<String>","parent":null,"children":[],"decl_id":null,"docs":" Makes a copy of the underlying buffer and returns the owned version of\n `Self`.\n","sig":null,"attributes":[{"value":"/ Makes a copy of the underlying buffer and returns the owned version of","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":82500,"byte_end":82574,"line_start":101,"line_end":101,"column_start":5,"column_end":79}},{"value":"/ `Self`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":82579,"byte_end":82590,"line_start":102,"line_end":102,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":82846,"byte_end":82849,"line_start":113,"line_end":113,"column_start":8,"column_end":11},"name":"fmt","qualname":"<StringLit<B> as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":516},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5067,"byte_end":5079,"line_start":156,"line_end":156,"column_start":10,"column_end":22},"name":"OwnedLiteral","qualname":"::OwnedLiteral","value":"Literal<String>","parent":null,"children":[],"decl_id":null,"docs":" A literal which owns the underlying buffer.\n","sig":null,"attributes":[{"value":"/ A literal which owns the underlying buffer.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5010,"byte_end":5057,"line_start":155,"line_end":155,"column_start":1,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":517},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5160,"byte_end":5173,"line_start":159,"line_end":159,"column_start":10,"column_end":23},"name":"SharedLiteral","qualname":"::SharedLiteral","value":"Literal<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" A literal whose underlying buffer is borrowed.\n","sig":null,"attributes":[{"value":"/ A literal whose underlying buffer is borrowed.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5100,"byte_end":5150,"line_start":158,"line_end":158,"column_start":1,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1247},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5757,"byte_end":5761,"line_start":173,"line_end":173,"column_start":5,"column_end":9},"name":"Bool","qualname":"::Literal::Bool","value":"Literal::Bool(BoolLit)","parent":{"krate":0,"index":1245},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1249},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5762,"byte_end":5769,"line_start":173,"line_end":173,"column_start":10,"column_end":17},"name":"0","qualname":"::Literal::Bool::0","value":"bool::BoolLit","parent":{"krate":0,"index":1247},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1250},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5776,"byte_end":5783,"line_start":174,"line_end":174,"column_start":5,"column_end":12},"name":"Integer","qualname":"::Literal::Integer","value":"Literal::Integer(IntegerLit<B>)","parent":{"krate":0,"index":1245},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1252},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5784,"byte_end":5797,"line_start":174,"line_end":174,"column_start":13,"column_end":26},"name":"0","qualname":"::Literal::Integer::0","value":"integer::IntegerLit<B>","parent":{"krate":0,"index":1250},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1253},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5804,"byte_end":5809,"line_start":175,"line_end":175,"column_start":5,"column_end":10},"name":"Float","qualname":"::Literal::Float","value":"Literal::Float(FloatLit<B>)","parent":{"krate":0,"index":1245},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1255},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5810,"byte_end":5821,"line_start":175,"line_end":175,"column_start":11,"column_end":22},"name":"0","qualname":"::Literal::Float::0","value":"float::FloatLit<B>","parent":{"krate":0,"index":1253},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1256},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5828,"byte_end":5832,"line_start":176,"line_end":176,"column_start":5,"column_end":9},"name":"Char","qualname":"::Literal::Char","value":"Literal::Char(CharLit<B>)","parent":{"krate":0,"index":1245},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1258},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5833,"byte_end":5843,"line_start":176,"line_end":176,"column_start":10,"column_end":20},"name":"0","qualname":"::Literal::Char::0","value":"char::CharLit<B>","parent":{"krate":0,"index":1256},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1259},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5850,"byte_end":5856,"line_start":177,"line_end":177,"column_start":5,"column_end":11},"name":"String","qualname":"::Literal::String","value":"Literal::String(StringLit<B>)","parent":{"krate":0,"index":1245},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1261},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5857,"byte_end":5869,"line_start":177,"line_end":177,"column_start":12,"column_end":24},"name":"0","qualname":"::Literal::String::0","value":"string::StringLit<B>","parent":{"krate":0,"index":1259},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1262},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5876,"byte_end":5880,"line_start":178,"line_end":178,"column_start":5,"column_end":9},"name":"Byte","qualname":"::Literal::Byte","value":"Literal::Byte(ByteLit<B>)","parent":{"krate":0,"index":1245},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1264},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5881,"byte_end":5891,"line_start":178,"line_end":178,"column_start":10,"column_end":20},"name":"0","qualname":"::Literal::Byte::0","value":"byte::ByteLit<B>","parent":{"krate":0,"index":1262},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1265},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5898,"byte_end":5908,"line_start":179,"line_end":179,"column_start":5,"column_end":15},"name":"ByteString","qualname":"::Literal::ByteString","value":"Literal::ByteString(ByteStringLit<B>)","parent":{"krate":0,"index":1245},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1267},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5909,"byte_end":5925,"line_start":179,"line_end":179,"column_start":16,"column_end":32},"name":"0","qualname":"::Literal::ByteString::0","value":"bytestr::ByteStringLit<B>","parent":{"krate":0,"index":1265},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1245},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5732,"byte_end":5739,"line_start":172,"line_end":172,"column_start":10,"column_end":17},"name":"Literal","qualname":"::Literal","value":"enum Literal<B> where B: Buffer {\n    Bool(BoolLit),\n    Integer(IntegerLit<B>),\n    Float(FloatLit<B>),\n    Char(CharLit<B>),\n    String(StringLit<B>),\n    Byte(ByteLit<B>),\n    ByteString(ByteStringLit<B>),\n}","parent":null,"children":[{"krate":0,"index":1247},{"krate":0,"index":1250},{"krate":0,"index":1253},{"krate":0,"index":1256},{"krate":0,"index":1259},{"krate":0,"index":1262},{"krate":0,"index":1265}],"decl_id":null,"docs":" A literal. This is the main type of this library.","sig":null,"attributes":[{"value":"/ A literal. This is the main type of this library.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5199,"byte_end":5252,"line_start":161,"line_end":161,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5253,"byte_end":5256,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ This type is generic over the underlying buffer `B`, which can be `&str` or","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5257,"byte_end":5336,"line_start":163,"line_end":163,"column_start":1,"column_end":80}},{"value":"/ `String`. There are two useful type aliases: [`OwnedLiteral`] and","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5337,"byte_end":5406,"line_start":164,"line_end":164,"column_start":1,"column_end":70}},{"value":"/ [`SharedLiteral`].","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5407,"byte_end":5429,"line_start":165,"line_end":165,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5430,"byte_end":5433,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ To create this type, you have to either call [`Literal::parse`] with an","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5434,"byte_end":5509,"line_start":167,"line_end":167,"column_start":1,"column_end":76}},{"value":"/ input string or use the `From<_>` impls of this type. The impls are only","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5510,"byte_end":5586,"line_start":168,"line_end":168,"column_start":1,"column_end":77}},{"value":"/ available of the corresponding crate features are enabled (they are enabled","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5587,"byte_end":5666,"line_start":169,"line_end":169,"column_start":1,"column_end":80}},{"value":"/ by default).","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5667,"byte_end":5683,"line_start":170,"line_end":170,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":6058,"byte_end":6068,"line_start":185,"line_end":185,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<Literal<&'_ str>>::into_owned","value":"fn into_owned(Self) -> OwnedLiteral","parent":null,"children":[],"decl_id":null,"docs":" Makes a copy of the underlying buffer and returns the owned version of\n `Self`.\n","sig":null,"attributes":[{"value":"/ Makes a copy of the underlying buffer and returns the owned version of","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5956,"byte_end":6030,"line_start":183,"line_end":183,"column_start":5,"column_end":79}},{"value":"/ `Self`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":6035,"byte_end":6046,"line_start":184,"line_end":184,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":6641,"byte_end":6644,"line_start":199,"line_end":199,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Literal<B> as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":9907},"children":[],"decl_id":{"krate":2,"index":9908},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":524},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":7613,"byte_end":7619,"line_start":223,"line_end":223,"column_start":11,"column_end":17},"name":"Buffer","qualname":"::Buffer","value":"Buffer: sealed::Sealed + Deref<Target = str>","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529}],"decl_id":null,"docs":" A shared or owned string buffer. Implemented for `String` and `&str`. *Implementation detail*.","sig":null,"attributes":[{"value":"/ A shared or owned string buffer. Implemented for `String` and `&str`. *Implementation detail*.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":7257,"byte_end":7355,"line_start":217,"line_end":217,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":7356,"byte_end":7359,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ This is trait is implementation detail of this library, cannot be","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":7360,"byte_end":7429,"line_start":219,"line_end":219,"column_start":1,"column_end":70}},{"value":"/ implemented in other crates and is not subject to semantic versioning.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":7430,"byte_end":7504,"line_start":220,"line_end":220,"column_start":1,"column_end":75}},{"value":"/ `litrs` only gurantees that this trait is implemented for `String` and","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":7505,"byte_end":7579,"line_start":221,"line_end":221,"column_start":1,"column_end":75}},{"value":"/ `for<'a> &'a str`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":7580,"byte_end":7602,"line_start":222,"line_end":222,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":525},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":7753,"byte_end":7756,"line_start":225,"line_end":225,"column_start":10,"column_end":13},"name":"Cow","qualname":"::Buffer::Cow","value":"type Cow: From<String> + AsRef<str> + Borrow<str> + Deref<Target = str>;","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" This is `Cow<'static, str>` for `String`, and `Cow<'a, str>` for `&'a str`.\n","sig":null,"attributes":[{"value":"/ This is `Cow<'static, str>` for `String`, and `Cow<'a, str>` for `&'a str`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":7664,"byte_end":7743,"line_start":224,"line_end":224,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":7848,"byte_end":7856,"line_start":228,"line_end":228,"column_start":8,"column_end":16},"name":"into_cow","qualname":"::Buffer::into_cow","value":"fn into_cow(Self) -> Self::Cow","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":527},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":7973,"byte_end":7980,"line_start":231,"line_end":231,"column_start":10,"column_end":17},"name":"ByteCow","qualname":"::Buffer::ByteCow","value":"type ByteCow: From<Vec<u8>> + AsRef<[u8]> + Borrow<[u8]> + Deref<Target = [u8]>;","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" This is `Cow<'static, [u8]>` for `String`, and `Cow<'a, [u8]>` for `&'a str`.\n","sig":null,"attributes":[{"value":"/ This is `Cow<'static, [u8]>` for `String`, and `Cow<'a, [u8]>` for `&'a str`.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":7882,"byte_end":7963,"line_start":230,"line_end":230,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":8076,"byte_end":8089,"line_start":234,"line_end":234,"column_start":8,"column_end":21},"name":"into_byte_cow","qualname":"::Buffer::into_byte_cow","value":"fn into_byte_cow(Self) -> Self::ByteCow","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":8254,"byte_end":8257,"line_start":239,"line_end":239,"column_start":8,"column_end":11},"name":"cut","qualname":"::Buffer::cut","value":"fn cut(Self, Range<usize>) -> Self","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Cuts away some characters at the beginning and some at the end. Given\n range has to be in bounds.\n","sig":null,"attributes":[{"value":"/ Cuts away some characters at the beginning and some at the end. Given","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":8119,"byte_end":8192,"line_start":236,"line_end":236,"column_start":5,"column_end":78}},{"value":"/ range has to be in bounds.","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":8197,"byte_end":8227,"line_start":237,"line_end":237,"column_start":5,"column_end":35}}]},{"kind":"Trait","id":{"krate":0,"index":531},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":8324,"byte_end":8330,"line_start":243,"line_end":243,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::sealed::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":8432,"byte_end":8435,"line_start":249,"line_end":249,"column_start":8,"column_end":11},"name":"cut","qualname":"<&'a str as Buffer>::cut","value":"fn cut(Self, Range<usize>) -> Self","parent":{"krate":0,"index":524},"children":[],"decl_id":{"krate":0,"index":529},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":538},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":8556,"byte_end":8564,"line_start":255,"line_end":255,"column_start":8,"column_end":16},"name":"into_cow","qualname":"<&'a str as Buffer>::into_cow","value":"fn into_cow(Self) -> Self::Cow","parent":{"krate":0,"index":524},"children":[],"decl_id":{"krate":0,"index":526},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":540},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":8672,"byte_end":8685,"line_start":260,"line_end":260,"column_start":8,"column_end":21},"name":"into_byte_cow","qualname":"<&'a str as Buffer>::into_byte_cow","value":"fn into_byte_cow(Self) -> Self::ByteCow","parent":{"krate":0,"index":524},"children":[],"decl_id":{"krate":0,"index":528},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":8836,"byte_end":8839,"line_start":268,"line_end":268,"column_start":8,"column_end":11},"name":"cut","qualname":"<String as Buffer>::cut","value":"fn cut(Self, Range<usize>) -> Self","parent":{"krate":0,"index":524},"children":[],"decl_id":{"krate":0,"index":529},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":9229,"byte_end":9237,"line_start":279,"line_end":279,"column_start":8,"column_end":16},"name":"into_cow","qualname":"<String as Buffer>::into_cow","value":"fn into_cow(Self) -> Self::Cow","parent":{"krate":0,"index":524},"children":[],"decl_id":{"krate":0,"index":526},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":9351,"byte_end":9364,"line_start":285,"line_end":285,"column_start":8,"column_end":21},"name":"into_byte_cow","qualname":"<String as Buffer>::into_byte_cow","value":"fn into_byte_cow(Self) -> Self::ByteCow","parent":{"krate":0,"index":524},"children":[],"decl_id":{"krate":0,"index":528},"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":9987,"byte_end":9994,"line_start":19,"line_end":19,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":10761,"byte_end":10768,"line_start":47,"line_end":47,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11321,"byte_end":11328,"line_start":21,"line_end":21,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":12195,"byte_end":12202,"line_start":53,"line_end":53,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":12493,"byte_end":12500,"line_start":64,"line_end":64,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":14406,"byte_end":14419,"line_start":29,"line_end":29,"column_start":17,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":16980,"byte_end":16993,"line_start":103,"line_end":103,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":17338,"byte_end":17351,"line_start":115,"line_end":115,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":17938,"byte_end":17945,"line_start":22,"line_end":22,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":18794,"byte_end":18801,"line_start":52,"line_end":52,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":19092,"byte_end":19099,"line_start":63,"line_end":63,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":20426,"byte_end":20438,"line_start":13,"line_end":13,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":163}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":22365,"byte_end":22377,"line_start":65,"line_end":65,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":22404,"byte_end":22416,"line_start":67,"line_end":67,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":23897,"byte_end":23901,"line_start":112,"line_end":112,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24046,"byte_end":24050,"line_start":119,"line_end":119,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25595,"byte_end":25605,"line_start":159,"line_end":159,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":26354,"byte_end":26360,"line_start":182,"line_end":182,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":26487,"byte_end":26492,"line_start":188,"line_end":188,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":30012,"byte_end":30022,"line_start":314,"line_end":314,"column_start":28,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":30049,"byte_end":30059,"line_start":316,"line_end":316,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":43952,"byte_end":43960,"line_start":67,"line_end":67,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":46491,"byte_end":46499,"line_start":140,"line_end":140,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":46967,"byte_end":46975,"line_start":154,"line_end":154,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68180,"byte_end":68191,"line_start":63,"line_end":63,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68538,"byte_end":68548,"line_start":76,"line_end":76,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344},{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71427,"byte_end":71437,"line_start":161,"line_end":161,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":347}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71873,"byte_end":71883,"line_start":175,"line_end":175,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":350}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/parse.rs","byte_start":76463,"byte_end":76470,"line_start":16,"line_end":16,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":80097,"byte_end":80106,"line_start":30,"line_end":30,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":82478,"byte_end":82487,"line_start":100,"line_end":100,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":82824,"byte_end":82833,"line_start":112,"line_end":112,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5936,"byte_end":5943,"line_start":182,"line_end":182,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":6621,"byte_end":6628,"line_start":198,"line_end":198,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":8775,"byte_end":8781,"line_start":265,"line_end":265,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":8801,"byte_end":8807,"line_start":266,"line_end":266,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":9987,"byte_end":9994,"line_start":19,"line_end":19,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":548},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bool/mod.rs","byte_start":10761,"byte_end":10768,"line_start":47,"line_end":47,"column_start":23,"column_end":30},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":548},"to":{"krate":2,"index":9907}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":11321,"byte_end":11328,"line_start":21,"line_end":21,"column_start":17,"column_end":24},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":564},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":12195,"byte_end":12202,"line_start":53,"line_end":53,"column_start":6,"column_end":13},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":564},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/byte/mod.rs","byte_start":12493,"byte_end":12500,"line_start":64,"line_end":64,"column_start":34,"column_end":41},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":564},"to":{"krate":2,"index":9907}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":14406,"byte_end":14419,"line_start":29,"line_end":29,"column_start":17,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":16980,"byte_end":16993,"line_start":103,"line_end":103,"column_start":6,"column_end":19},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":587},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/bytestr/mod.rs","byte_start":17338,"byte_end":17351,"line_start":115,"line_end":115,"column_start":34,"column_end":47},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":587},"to":{"krate":2,"index":9907}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":17938,"byte_end":17945,"line_start":22,"line_end":22,"column_start":17,"column_end":24},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":18794,"byte_end":18801,"line_start":52,"line_end":52,"column_start":6,"column_end":13},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/char/mod.rs","byte_start":19092,"byte_end":19099,"line_start":63,"line_end":63,"column_start":34,"column_end":41},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":609},"to":{"krate":2,"index":9907}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":20426,"byte_end":20438,"line_start":13,"line_end":13,"column_start":6,"column_end":18},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":22365,"byte_end":22377,"line_start":65,"line_end":65,"column_start":28,"column_end":40},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":632},"to":{"krate":1,"index":2555}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":22404,"byte_end":22416,"line_start":67,"line_end":67,"column_start":23,"column_end":35},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":632},"to":{"krate":2,"index":9907}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":23897,"byte_end":23901,"line_start":112,"line_end":112,"column_start":33,"column_end":37},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":675},"to":{"krate":2,"index":3056}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":24046,"byte_end":24050,"line_start":119,"line_end":119,"column_start":34,"column_end":38},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":675},"to":{"krate":2,"index":3056}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":25595,"byte_end":25605,"line_start":159,"line_end":159,"column_start":6,"column_end":16},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":687},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":26354,"byte_end":26360,"line_start":182,"line_end":182,"column_start":19,"column_end":25},"kind":{"Impl":{"id":17}},"from":{"krate":2,"index":46939},"to":{"krate":0,"index":196}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":26487,"byte_end":26492,"line_start":188,"line_end":188,"column_start":19,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":2,"index":45350},"to":{"krate":0,"index":196}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":30012,"byte_end":30022,"line_start":314,"line_end":314,"column_start":28,"column_end":38},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":687},"to":{"krate":1,"index":2555}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/err.rs","byte_start":30049,"byte_end":30059,"line_start":316,"line_end":316,"column_start":23,"column_end":33},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":687},"to":{"krate":2,"index":9907}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/escape.rs","byte_start":36039,"byte_end":36043,"line_start":83,"line_end":83,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3053},"to":{"krate":0,"index":224}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":43952,"byte_end":43960,"line_start":67,"line_end":67,"column_start":17,"column_end":25},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":46491,"byte_end":46499,"line_start":140,"line_end":140,"column_start":6,"column_end":14},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/float/mod.rs","byte_start":46967,"byte_end":46975,"line_start":154,"line_end":154,"column_start":34,"column_end":42},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":778},"to":{"krate":2,"index":9907}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68180,"byte_end":68191,"line_start":63,"line_end":63,"column_start":6,"column_end":17},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1095},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":68538,"byte_end":68548,"line_start":76,"line_end":76,"column_start":17,"column_end":27},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1069},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71427,"byte_end":71437,"line_start":161,"line_end":161,"column_start":6,"column_end":16},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1069},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":71873,"byte_end":71883,"line_start":175,"line_end":175,"column_start":34,"column_end":44},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1069},"to":{"krate":2,"index":9907}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":72315,"byte_end":72321,"line_start":186,"line_end":186,"column_start":45,"column_end":51},"kind":"SuperTrait","from":{"krate":0,"index":358},"to":{"krate":0,"index":351}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/integer/mod.rs","byte_start":72324,"byte_end":72328,"line_start":186,"line_end":186,"column_start":54,"column_end":58},"kind":"SuperTrait","from":{"krate":2,"index":3160},"to":{"krate":0,"index":351}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/parse.rs","byte_start":76463,"byte_end":76470,"line_start":16,"line_end":16,"column_start":17,"column_end":24},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":80097,"byte_end":80106,"line_start":30,"line_end":30,"column_start":17,"column_end":26},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1223},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":82478,"byte_end":82487,"line_start":100,"line_end":100,"column_start":6,"column_end":15},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1223},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/string/mod.rs","byte_start":82824,"byte_end":82833,"line_start":112,"line_end":112,"column_start":34,"column_end":43},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1223},"to":{"krate":2,"index":9907}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":5936,"byte_end":5943,"line_start":182,"line_end":182,"column_start":6,"column_end":13},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1245},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":6621,"byte_end":6628,"line_start":198,"line_end":198,"column_start":34,"column_end":41},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1245},"to":{"krate":2,"index":9907}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":7629,"byte_end":7635,"line_start":223,"line_end":223,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":531},"to":{"krate":0,"index":524}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":7638,"byte_end":7643,"line_start":223,"line_end":223,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":2,"index":3369},"to":{"krate":0,"index":524}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":8775,"byte_end":8781,"line_start":265,"line_end":265,"column_start":25,"column_end":31},"kind":{"Impl":{"id":109}},"from":{"krate":5,"index":8050},"to":{"krate":0,"index":531}},{"span":{"file_name":"/home/nick12345/.cargo/registry/src/github.com-1ecc6299db9ec823/litrs-0.3.0/src/lib.rs","byte_start":8801,"byte_end":8807,"line_start":266,"line_end":266,"column_start":17,"column_end":23},"kind":{"Impl":{"id":110}},"from":{"krate":5,"index":8050},"to":{"krate":0,"index":524}}]}